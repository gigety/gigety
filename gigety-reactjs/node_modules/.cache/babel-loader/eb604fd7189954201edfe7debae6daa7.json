{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatMessenger/ChatMessenger.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState, useCallback } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { use121ChatMessages, useMessenger } from 'redux/hooks/useMessages';\nimport { List } from 'semantic-ui-react';\nimport ContactAvatar from '../ContactAvatar/ContactAvatar';\nimport MessageInput from '../MessageInput/MessageInput';\nimport { findMessagesFor121Chat } from 'redux/actions/messagesAction';\nimport { StompClientContext } from 'contexts/StompClientContext';\nimport { GIGETY_MESSENGER_URL } from '../../../constants';\n\nconst ChatMessenger = ({\n  activeContact\n}) => {\n  _s();\n\n  const {\n    giguser\n  } = useSelector(state => state.giguser);\n  activeContact = activeContact ? activeContact : {};\n  console.log('Active COntact :::: ', activeContact);\n  const messages = use121ChatMessages(giguser.id, activeContact.contactId); //useMessenger(giguser, activeContact);\n  //onst { stompClient } = useContext(StompClientContext);\n\n  const dispatch = useDispatch();\n  const onMessageRecieved = useCallback(msg => {\n    console.log('RECEIVED MESSAGE +++++++++++++++++++', activeContact);\n    const notification = JSON.parse(msg.body);\n\n    if (activeContact.contactId === notification.senderId) {\n      console.log('WE FOUND A MATCH');\n      dispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n    }\n  }, [activeContact, dispatch, giguser.id]);\n  useEffect(() => {\n    const stomp = require('stompjs');\n\n    let SockJS = require('sockjs-client');\n\n    SockJS = new SockJS(GIGETY_MESSENGER_URL + '/ws');\n    const stompClient = stomp.over(SockJS);\n\n    const onError = error => {\n      console.log('ERRRRRRRRRRRRRRR : ', error);\n    };\n\n    const onConnected = () => {\n      const {\n        id\n      } = stompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved);\n      console.log('IIIISSSS COOONN NNEEECCCCTTTTED v wwwwwwaaaaayyyy:: ', stompClient.connected);\n      return () => {\n        console.log(`here we unsubscibe to id ${id}, you best check this is proper way to unsubscribe`);\n        stompClient.unsubscribe(id);\n      };\n    };\n\n    stompClient.connect({}, onConnected, onError);\n  }, [giguser, dispatch, onMessageRecieved]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ScrollToBottom, {\n      className: \"messages\",\n      children: /*#__PURE__*/_jsxDEV(List, {\n        children: messages ? messages.map(msg => /*#__PURE__*/_jsxDEV(List.Item, {\n          children: [/*#__PURE__*/_jsxDEV(ContactAvatar, {\n            size: \"med\",\n            contact: activeContact\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(List.Content, {\n            children: /*#__PURE__*/_jsxDEV(List.Description, {\n              children: msg.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 10\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }, this)) : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      activeContact: activeContact,\n      giguser: giguser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChatMessenger, \"awMXvAESWqx5M39TxtudtAnra2A=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ChatMessenger;\nChatMessenger.propTypes = {\n  activeContact: {\n    contactId: PropTypes.string\n  }\n};\nChatMessenger.defaultProps = {\n  activeContact: {\n    contactId: '0'\n  }\n};\nexport default ChatMessenger;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatMessenger\");","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatMessenger/ChatMessenger.js"],"names":["React","useContext","useEffect","useState","useCallback","PropTypes","useDispatch","useSelector","ScrollToBottom","use121ChatMessages","useMessenger","List","ContactAvatar","MessageInput","findMessagesFor121Chat","StompClientContext","GIGETY_MESSENGER_URL","ChatMessenger","activeContact","giguser","state","console","log","messages","id","contactId","dispatch","onMessageRecieved","msg","notification","JSON","parse","body","senderId","stomp","require","SockJS","stompClient","over","onError","error","onConnected","subscribe","connected","unsubscribe","connect","map","content","propTypes","string","defaultProps"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState, useCallback } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { use121ChatMessages, useMessenger } from 'redux/hooks/useMessages';\nimport { List } from 'semantic-ui-react';\nimport ContactAvatar from '../ContactAvatar/ContactAvatar';\nimport MessageInput from '../MessageInput/MessageInput';\nimport { findMessagesFor121Chat } from 'redux/actions/messagesAction';\nimport { StompClientContext } from 'contexts/StompClientContext';\nimport { GIGETY_MESSENGER_URL } from '../../../constants';\nconst ChatMessenger = ({ activeContact }) => {\n\tconst { giguser } = useSelector((state) => state.giguser);\n\tactiveContact = activeContact ? activeContact : {};\n\tconsole.log('Active COntact :::: ', activeContact);\n\tconst messages = use121ChatMessages(giguser.id, activeContact.contactId);\n\t//useMessenger(giguser, activeContact);\n\t//onst { stompClient } = useContext(StompClientContext);\n\tconst dispatch = useDispatch();\n\tconst onMessageRecieved = useCallback(\n\t\t(msg) => {\n\t\t\tconsole.log('RECEIVED MESSAGE +++++++++++++++++++', activeContact);\n\t\t\tconst notification = JSON.parse(msg.body);\n\t\t\tif (activeContact.contactId === notification.senderId) {\n\t\t\t\tconsole.log('WE FOUND A MATCH');\n\t\t\t\tdispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n\t\t\t}\n\t\t},\n\t\t[activeContact, dispatch, giguser.id]\n\t);\n\tuseEffect(() => {\n\t\tconst stomp = require('stompjs');\n\t\tlet SockJS = require('sockjs-client');\n\t\tSockJS = new SockJS(GIGETY_MESSENGER_URL + '/ws');\n\t\tconst stompClient = stomp.over(SockJS);\n\t\tconst onError = (error) => {\n\t\t\tconsole.log('ERRRRRRRRRRRRRRR : ', error);\n\t\t};\n\n\t\tconst onConnected = () => {\n\t\t\tconst { id } = stompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved);\n\t\t\tconsole.log('IIIISSSS COOONN NNEEECCCCTTTTED v wwwwwwaaaaayyyy:: ', stompClient.connected);\n\t\t\treturn () => {\n\t\t\t\tconsole.log(`here we unsubscibe to id ${id}, you best check this is proper way to unsubscribe`);\n\t\t\t\tstompClient.unsubscribe(id);\n\t\t\t};\n\t\t};\n\t\tstompClient.connect({}, onConnected, onError);\n\t}, [giguser, dispatch, onMessageRecieved]);\n\treturn (\n\t\t<>\n\t\t\t<ScrollToBottom className=\"messages\">\n\t\t\t\t<List>\n\t\t\t\t\t{messages\n\t\t\t\t\t\t? messages.map((msg) => (\n\t\t\t\t\t\t\t\t<List.Item>\n\t\t\t\t\t\t\t\t\t<ContactAvatar size=\"med\" contact={activeContact} />\n\t\t\t\t\t\t\t\t\t<List.Content>\n\t\t\t\t\t\t\t\t\t\t<List.Description>{msg.content}</List.Description>\n\t\t\t\t\t\t\t\t\t</List.Content>\n\t\t\t\t\t\t\t\t</List.Item>\n\t\t\t\t\t\t  ))\n\t\t\t\t\t\t: ''}\n\t\t\t\t</List>\n\t\t\t</ScrollToBottom>\n\t\t\t<MessageInput activeContact={activeContact} giguser={giguser}></MessageInput>\n\t\t</>\n\t);\n};\n\nChatMessenger.propTypes = {\n\tactiveContact: {\n\t\tcontactId: PropTypes.string,\n\t},\n};\nChatMessenger.defaultProps = {\n\tactiveContact: { contactId: '0' },\n};\nexport default ChatMessenger;\n"]},"metadata":{},"sourceType":"module"}