{"ast":null,"code":"import { GET_ERRORS, SET_CURRENT_USR } from './types';\nimport { setJwtTokenHeader } from 'utils/jwtUtil';\nimport jwt_decode from 'jwt-decode';\nexport const loginAction = token => async dispatch => {\n  try {\n    //store token in local storage\n    localStorage.setItem('jwtToken', token); //set token in header\n\n    setJwtTokenHeader(token); //decode token on React\n\n    const decoded = jwt_decode(token);\n    console.log('DECODED: ', decoded); //dispatch to security reducer\n\n    dispatch({\n      type: SET_CURRENT_USR,\n      payload: decoded\n    });\n  } catch (error) {\n    console.error('Dispatching errors', error.response.data);\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('jwtToken');\n  setJwtTokenHeader(false);\n  dispatch({\n    type: SET_CURRENT_USR,\n    payload: null\n  });\n};","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/redux/actions/auth.js"],"names":["GET_ERRORS","SET_CURRENT_USR","setJwtTokenHeader","jwt_decode","loginAction","token","dispatch","localStorage","setItem","decoded","console","log","type","payload","error","response","data","logout","removeItem"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,eAArB,QAA4C,SAA5C;AACA,SAASC,iBAAT,QAAkC,eAAlC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW,MAAOC,QAAP,IAAoB;AACzD,MAAI;AACH;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC,EAFG,CAIH;;AACAH,IAAAA,iBAAiB,CAACG,KAAD,CAAjB,CALG,CAOH;;AACA,UAAMI,OAAO,GAAGN,UAAU,CAACE,KAAD,CAA1B;AAEAK,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,OAAzB,EAVG,CAWH;;AACAH,IAAAA,QAAQ,CAAC;AACRM,MAAAA,IAAI,EAAEX,eADE;AAERY,MAAAA,OAAO,EAAEJ;AAFD,KAAD,CAAR;AAIA,GAhBD,CAgBE,OAAOK,KAAP,EAAc;AACfJ,IAAAA,OAAO,CAACI,KAAR,CAAc,oBAAd,EAAoCA,KAAK,CAACC,QAAN,CAAeC,IAAnD;AACAV,IAAAA,QAAQ,CAAC;AACRM,MAAAA,IAAI,EAAEZ,UADE;AAERa,MAAAA,OAAO,EAAEC,KAAK,CAACC,QAAN,CAAeC;AAFhB,KAAD,CAAR;AAIA;AACD,CAxBM;AA0BP,OAAO,MAAMC,MAAM,GAAG,MAAOX,QAAD,IAAc;AACzCC,EAAAA,YAAY,CAACW,UAAb,CAAwB,UAAxB;AACAhB,EAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAI,EAAAA,QAAQ,CAAC;AACRM,IAAAA,IAAI,EAAEX,eADE;AAERY,IAAAA,OAAO,EAAE;AAFD,GAAD,CAAR;AAIA,CAPM","sourcesContent":["import { GET_ERRORS, SET_CURRENT_USR } from './types';\nimport { setJwtTokenHeader } from 'utils/jwtUtil';\nimport jwt_decode from 'jwt-decode';\n\nexport const loginAction = (token) => async (dispatch) => {\n\ttry {\n\t\t//store token in local storage\n\t\tlocalStorage.setItem('jwtToken', token);\n\n\t\t//set token in header\n\t\tsetJwtTokenHeader(token);\n\n\t\t//decode token on React\n\t\tconst decoded = jwt_decode(token);\n\n\t\tconsole.log('DECODED: ', decoded);\n\t\t//dispatch to security reducer\n\t\tdispatch({\n\t\t\ttype: SET_CURRENT_USR,\n\t\t\tpayload: decoded,\n\t\t});\n\t} catch (error) {\n\t\tconsole.error('Dispatching errors', error.response.data);\n\t\tdispatch({\n\t\t\ttype: GET_ERRORS,\n\t\t\tpayload: error.response.data,\n\t\t});\n\t}\n};\n\nexport const logout = () => (dispatch) => {\n\tlocalStorage.removeItem('jwtToken');\n\tsetJwtTokenHeader(false);\n\tdispatch({\n\t\ttype: SET_CURRENT_USR,\n\t\tpayload: null,\n\t});\n};\n"]},"metadata":{},"sourceType":"module"}