{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { StompClientContext } from 'contexts/StompClientContext';\nimport { useContext, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { findMessagesFor121Chat, findNewUserMessages, findUserMessageNotifications, updateChatMessages } from '../actions/messagesAction';\nexport const use121ChatMessages = (senderId, recipientId) => {\n  _s();\n\n  const content = useSelector(state => state.messages);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(findMessagesFor121Chat(senderId, recipientId));\n  }, [dispatch, senderId, recipientId]);\n  return content.messages;\n};\n\n_s(use121ChatMessages, \"C7Gsg2cuNtyu1IT4jiHEh9hf2uY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\nexport const useAllUserMessageNotifications = userId => {\n  _s2();\n\n  const content = useSelector(state => state.messages);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(findUserMessageNotifications(userId));\n  }, [dispatch, userId]);\n  return content.messageNotifications;\n};\n\n_s2(useAllUserMessageNotifications, \"C7Gsg2cuNtyu1IT4jiHEh9hf2uY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\nexport const useAllNewUserMessages = userId => {\n  _s3();\n\n  const content = useSelector(state => state.messages);\n  console.log(content);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(findNewUserMessages(userId));\n  }, [dispatch, userId]);\n  return content.newMessages;\n};\n\n_s3(useAllNewUserMessages, \"C7Gsg2cuNtyu1IT4jiHEh9hf2uY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\nexport const useMessenger = (giguser, contact, sendChatMessage) => {\n  _s4();\n\n  const dispatch = useDispatch();\n  const {\n    getStompClient\n  } = useContext(StompClientContext);\n  useEffect(() => {\n    const stompClient = getStompClient();\n\n    sendChatMessage.current = message => {\n      stompClient.publish({\n        destination: '/msg/chat',\n        body: JSON.stringify(message)\n      });\n      dispatch(updateChatMessages(message));\n    };\n\n    const onMessageRecieved = msg => {\n      console.log('RECIIIIIIIIEEEEWEEEVED');\n      const notification = JSON.parse(msg.body);\n\n      if (contact.contactId === notification.senderId) {\n        console.log('WE FOUND A MATCH');\n        dispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n      }\n    };\n\n    console.log('Subscribing ... ');\n    const {\n      id\n    } = stompClient.subscribe(`/user/${giguser.id}/queue}/messages`, onMessageRecieved);\n    return () => {\n      if (stompClient) {\n        console.log('UNSUBSCRIBING ...');\n        stompClient.unsubscribe(id);\n      }\n    };\n  }, [giguser, contact.contactId, getStompClient, dispatch, sendChatMessage]);\n};\n\n_s4(useMessenger, \"K6TckfeU+zntmrwWByyus3k5N28=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/redux/hooks/useMessages.js"],"names":["StompClientContext","useContext","useEffect","useDispatch","useSelector","findMessagesFor121Chat","findNewUserMessages","findUserMessageNotifications","updateChatMessages","use121ChatMessages","senderId","recipientId","content","state","messages","dispatch","useAllUserMessageNotifications","userId","messageNotifications","useAllNewUserMessages","console","log","newMessages","useMessenger","giguser","contact","sendChatMessage","getStompClient","stompClient","current","message","publish","destination","body","JSON","stringify","onMessageRecieved","msg","notification","parse","contactId","id","subscribe","unsubscribe"],"mappings":"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","sourcesContent":["import { StompClientContext } from 'contexts/StompClientContext';\nimport { useContext, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n\tfindMessagesFor121Chat,\n\tfindNewUserMessages,\n\tfindUserMessageNotifications,\n\tupdateChatMessages,\n} from '../actions/messagesAction';\n\nexport const use121ChatMessages = (senderId, recipientId) => {\n\tconst content = useSelector((state) => state.messages);\n\tconst dispatch = useDispatch();\n\tuseEffect(() => {\n\t\tdispatch(findMessagesFor121Chat(senderId, recipientId));\n\t}, [dispatch, senderId, recipientId]);\n\treturn content.messages;\n};\n\nexport const useAllUserMessageNotifications = (userId) => {\n\tconst content = useSelector((state) => state.messages);\n\tconst dispatch = useDispatch();\n\tuseEffect(() => {\n\t\tdispatch(findUserMessageNotifications(userId));\n\t}, [dispatch, userId]);\n\treturn content.messageNotifications;\n};\n\nexport const useAllNewUserMessages = (userId) => {\n\tconst content = useSelector((state) => state.messages);\n\tconsole.log(content);\n\tconst dispatch = useDispatch();\n\tuseEffect(() => {\n\t\tdispatch(findNewUserMessages(userId));\n\t}, [dispatch, userId]);\n\treturn content.newMessages;\n};\nexport const useMessenger = (giguser, contact, sendChatMessage) => {\n\tconst dispatch = useDispatch();\n\tconst { getStompClient } = useContext(StompClientContext);\n\tuseEffect(() => {\n\t\tconst stompClient = getStompClient();\n\t\tsendChatMessage.current = (message) => {\n\t\t\tstompClient.publish({ destination: '/msg/chat', body: JSON.stringify(message) });\n\t\t\tdispatch(updateChatMessages(message));\n\t\t};\n\t\tconst onMessageRecieved = (msg) => {\n\t\t\tconsole.log('RECIIIIIIIIEEEEWEEEVED');\n\t\t\tconst notification = JSON.parse(msg.body);\n\t\t\tif (contact.contactId === notification.senderId) {\n\t\t\t\tconsole.log('WE FOUND A MATCH');\n\t\t\t\tdispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n\t\t\t}\n\t\t};\n\t\tconsole.log('Subscribing ... ');\n\t\tconst { id } = stompClient.subscribe(`/user/${giguser.id}/queue}/messages`, onMessageRecieved);\n\t\treturn () => {\n\t\t\tif (stompClient) {\n\t\t\t\tconsole.log('UNSUBSCRIBING ...');\n\t\t\t\tstompClient.unsubscribe(id);\n\t\t\t}\n\t\t};\n\t}, [giguser, contact.contactId, getStompClient, dispatch, sendChatMessage]);\n};\n"]},"metadata":{},"sourceType":"module"}