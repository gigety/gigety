{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/contexts/StompClientContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useGigUser } from 'redux/hooks/useGigUser';\nimport { GIGETY_MESSENGER_URL } from '../constants';\nimport { updateChatMessages, updateUserMessageNotifications } from '../redux/actions/messagesAction';\nimport * as stomp from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\nconst StompClientContext = /*#__PURE__*/createContext(null);\nexport { StompClientContext };\n\nconst MessageContext = ({\n  children\n}) => {\n  _s();\n\n  let stompClient = null;\n  let wrappedStompClient = null;\n  const giguser = useGigUser();\n\n  const onConnected = () => {\n    console.log('SockJS iiiiiiissssss COnnected to STOMP protocol');\n    console.log('may be a good place to subscribe to user specific messages so they can be notified');\n\n    const onMessageRecieved = msg => {\n      const notification = JSON.parse(msg.body);\n      console.log('ALERT NOTIFICATION ::', notification);\n      dispatch(updateUserMessageNotifications(notification));\n    };\n\n    if (giguser) {\n      stompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved);\n    }\n  };\n\n  const onError = error => {\n    console.error('GIGETY ERROR in STompCLientContext');\n    console.error(error);\n  };\n\n  console.log(stomp); //Connect stompClient to gigety-ws-service\n  //stomp = require('stompjs');\n  //let SockJS = require('sockjs-client');\n\n  SockJS = new SockJS(GIGETY_MESSENGER_URL + '/ws'); //SockJS = new SockJS('http://localhost:7070/messenger/ws', null, {});\n\n  stompClient = stomp.Stomp.over(SockJS);\n  stompClient.connect({}, onConnected, onError);\n\n  stompClient.debug = f => f;\n\n  const dispatch = useDispatch();\n\n  const sendChatMessage = message => {\n    console.log(`sending Message ${message}`);\n    stompClient.send('/msg/chat', {}, JSON.stringify(message));\n    dispatch(updateChatMessages(message));\n  };\n\n  wrappedStompClient = {\n    stompClient,\n    sendChatMessage\n  };\n  console.log(`CONFIGURATION:::: wrappedStompClient = ${wrappedStompClient}`);\n  return /*#__PURE__*/_jsxDEV(StompClientContext.Provider, {\n    value: wrappedStompClient,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MessageContext, \"hmDje+g5IA0kLhQevsoqcp6L20I=\", false, function () {\n  return [useGigUser, useDispatch];\n});\n\n_c = MessageContext;\nexport default MessageContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageContext\");","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/contexts/StompClientContext.js"],"names":["React","createContext","useDispatch","useGigUser","GIGETY_MESSENGER_URL","updateChatMessages","updateUserMessageNotifications","stomp","SockJS","StompClientContext","MessageContext","children","stompClient","wrappedStompClient","giguser","onConnected","console","log","onMessageRecieved","msg","notification","JSON","parse","body","dispatch","subscribe","id","onError","error","Stomp","over","connect","debug","f","sendChatMessage","message","send","stringify"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,oBAAT,QAAqC,cAArC;AACA,SAASC,kBAAT,EAA6BC,8BAA7B,QAAmE,iCAAnE;AACA,OAAO,KAAKC,KAAZ,MAAuB,gBAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,MAAMC,kBAAkB,gBAAGR,aAAa,CAAC,IAAD,CAAxC;AACA,SAASQ,kBAAT;;AACA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACxC,MAAIC,WAAW,GAAG,IAAlB;AACA,MAAIC,kBAAkB,GAAG,IAAzB;AACA,QAAMC,OAAO,GAAGX,UAAU,EAA1B;;AACA,QAAMY,WAAW,GAAG,MAAM;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,kDAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,oFAAZ;;AACA,UAAMC,iBAAiB,GAAIC,GAAD,IAAS;AAClC,YAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAG,CAACI,IAAf,CAArB;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCG,YAArC;AACAI,MAAAA,QAAQ,CAAClB,8BAA8B,CAACc,YAAD,CAA/B,CAAR;AACA,KAJD;;AAKA,QAAIN,OAAJ,EAAa;AACZF,MAAAA,WAAW,CAACa,SAAZ,CAAuB,SAAQX,OAAO,CAACY,EAAG,iBAA1C,EAA4DR,iBAA5D;AACA;AACD,GAXD;;AAaA,QAAMS,OAAO,GAAIC,KAAD,IAAW;AAC1BZ,IAAAA,OAAO,CAACY,KAAR,CAAc,oCAAd;AACAZ,IAAAA,OAAO,CAACY,KAAR,CAAcA,KAAd;AACA,GAHD;;AAIAZ,EAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ,EArBwC,CAsBxC;AACA;AACA;;AACAC,EAAAA,MAAM,GAAG,IAAIA,MAAJ,CAAWJ,oBAAoB,GAAG,KAAlC,CAAT,CAzBwC,CA0BxC;;AACAQ,EAAAA,WAAW,GAAGL,KAAK,CAACsB,KAAN,CAAYC,IAAZ,CAAiBtB,MAAjB,CAAd;AACAI,EAAAA,WAAW,CAACmB,OAAZ,CAAoB,EAApB,EAAwBhB,WAAxB,EAAqCY,OAArC;;AAEAf,EAAAA,WAAW,CAACoB,KAAZ,GAAqBC,CAAD,IAAOA,CAA3B;;AACA,QAAMT,QAAQ,GAAGtB,WAAW,EAA5B;;AAEA,QAAMgC,eAAe,GAAIC,OAAD,IAAa;AACpCnB,IAAAA,OAAO,CAACC,GAAR,CAAa,mBAAkBkB,OAAQ,EAAvC;AACAvB,IAAAA,WAAW,CAACwB,IAAZ,CAAiB,WAAjB,EAA8B,EAA9B,EAAkCf,IAAI,CAACgB,SAAL,CAAeF,OAAf,CAAlC;AACAX,IAAAA,QAAQ,CAACnB,kBAAkB,CAAC8B,OAAD,CAAnB,CAAR;AACA,GAJD;;AAKAtB,EAAAA,kBAAkB,GAAG;AACpBD,IAAAA,WADoB;AAEpBsB,IAAAA;AAFoB,GAArB;AAKAlB,EAAAA,OAAO,CAACC,GAAR,CAAa,0CAAyCJ,kBAAmB,EAAzE;AACA,sBAAO,QAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEA,kBAApC;AAAA,cAAyDF;AAAzD;AAAA;AAAA;AAAA;AAAA,UAAP;AACA,CA7CD;;GAAMD,c;UAGWP,U,EA4BCD,W;;;KA/BZQ,c;AA+CN,eAAeA,cAAf","sourcesContent":["import React, { createContext } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useGigUser } from 'redux/hooks/useGigUser';\nimport { GIGETY_MESSENGER_URL } from '../constants';\nimport { updateChatMessages, updateUserMessageNotifications } from '../redux/actions/messagesAction';\nimport * as stomp from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\nconst StompClientContext = createContext(null);\nexport { StompClientContext };\nconst MessageContext = ({ children }) => {\n\tlet stompClient = null;\n\tlet wrappedStompClient = null;\n\tconst giguser = useGigUser();\n\tconst onConnected = () => {\n\t\tconsole.log('SockJS iiiiiiissssss COnnected to STOMP protocol');\n\t\tconsole.log('may be a good place to subscribe to user specific messages so they can be notified');\n\t\tconst onMessageRecieved = (msg) => {\n\t\t\tconst notification = JSON.parse(msg.body);\n\t\t\tconsole.log('ALERT NOTIFICATION ::', notification);\n\t\t\tdispatch(updateUserMessageNotifications(notification));\n\t\t};\n\t\tif (giguser) {\n\t\t\tstompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved);\n\t\t}\n\t};\n\n\tconst onError = (error) => {\n\t\tconsole.error('GIGETY ERROR in STompCLientContext');\n\t\tconsole.error(error);\n\t};\n\tconsole.log(stomp);\n\t//Connect stompClient to gigety-ws-service\n\t//stomp = require('stompjs');\n\t//let SockJS = require('sockjs-client');\n\tSockJS = new SockJS(GIGETY_MESSENGER_URL + '/ws');\n\t//SockJS = new SockJS('http://localhost:7070/messenger/ws', null, {});\n\tstompClient = stomp.Stomp.over(SockJS);\n\tstompClient.connect({}, onConnected, onError);\n\n\tstompClient.debug = (f) => f;\n\tconst dispatch = useDispatch();\n\n\tconst sendChatMessage = (message) => {\n\t\tconsole.log(`sending Message ${message}`);\n\t\tstompClient.send('/msg/chat', {}, JSON.stringify(message));\n\t\tdispatch(updateChatMessages(message));\n\t};\n\twrappedStompClient = {\n\t\tstompClient,\n\t\tsendChatMessage,\n\t};\n\n\tconsole.log(`CONFIGURATION:::: wrappedStompClient = ${wrappedStompClient}`);\n\treturn <StompClientContext.Provider value={wrappedStompClient}>{children}</StompClientContext.Provider>;\n};\n\nexport default MessageContext;\n"]},"metadata":{},"sourceType":"module"}