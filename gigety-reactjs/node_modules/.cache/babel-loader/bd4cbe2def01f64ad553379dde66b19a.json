{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getCurrentAddress } from '../actions/locationAction';\n/**\n * Use CurrentLocation across the app to get users current location.\n * Becareful not to get location to often, . so probably will refactor\n * this to have latest location, mix that with watch location\n * @param {*} options\n */\n\nexport const useCurrentAddress = (options = {}) => {\n  _s();\n\n  const content = useSelector(state => state.currentAddress);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getCurrentAddress());\n  }, [dispatch]);\n  return content.currentAddress;\n};\n\n_s(useCurrentAddress, \"C7Gsg2cuNtyu1IT4jiHEh9hf2uY=\", false, function () {\n  return [useSelector, useDispatch];\n});","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/redux/hooks/useCurrentAddress.js"],"names":["useEffect","useSelector","useDispatch","getCurrentAddress","useCurrentAddress","options","content","state","currentAddress","dispatch"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,OAAO,GAAG,EAAX,KAAkB;AAAA;;AAClD,QAAMC,OAAO,GAAGL,WAAW,CAAEM,KAAD,IAAWA,KAAK,CAACC,cAAlB,CAA3B;AACA,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACAF,EAAAA,SAAS,CAAC,MAAM;AACfS,IAAAA,QAAQ,CAACN,iBAAiB,EAAlB,CAAR;AACA,GAFQ,EAEN,CAACM,QAAD,CAFM,CAAT;AAGA,SAAOH,OAAO,CAACE,cAAf;AACA,CAPM;;GAAMJ,iB;UACIH,W,EACCC,W","sourcesContent":["import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getCurrentAddress } from '../actions/locationAction';\n/**\n * Use CurrentLocation across the app to get users current location.\n * Becareful not to get location to often, . so probably will refactor\n * this to have latest location, mix that with watch location\n * @param {*} options\n */\nexport const useCurrentAddress = (options = {}) => {\n\tconst content = useSelector((state) => state.currentAddress);\n\tconst dispatch = useDispatch();\n\tuseEffect(() => {\n\t\tdispatch(getCurrentAddress());\n\t}, [dispatch]);\n\treturn content.currentAddress;\n};\n"]},"metadata":{},"sourceType":"module"}