{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatModal/ChatModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Popup from 'reactjs-popup';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { Button, List } from 'semantic-ui-react';\nimport 'reactjs-popup/dist/index.css';\nimport UserLabel from '../../User/UserLabel';\nimport './ChatModal.css';\nimport { use121ChatMessages } from 'redux/hooks/useMessages';\nimport { mapProfileToContact } from 'utils/objectMapper';\nimport { findMessagesFor121Chat, updateChatMessages } from 'redux/actions/messagesAction';\nimport MessageInput from '../MessageInput/MessageInput';\nimport { StompRXClientContext } from 'contexts/StompRXClientContext';\nimport { useMessenger } from '../../../redux/hooks/useMessages';\nimport UserAvatar from '../UserAvatar/UserAvatar';\nimport ContactAvatar from '../ContactAvatar/ContactAvatar';\n\nconst ChatModal = ({\n  profile\n}) => {\n  _s();\n\n  const {\n    giguser\n  } = useSelector(state => state.giguser);\n  const messages = use121ChatMessages(giguser.id, profile.userId);\n  const contact = useMemo(() => mapProfileToContact(profile, giguser), [profile, giguser]);\n  const {\n    getStompClient\n  } = useContext(StompRXClientContext);\n  const sendChatMessage = useRef(null); //\tuseMessenger(giguser, contact, sendChatMessage);\n\n  const dispatch = useDispatch();\n  const userAvatar = useMemo(() => /*#__PURE__*/_jsxDEV(UserAvatar, {\n    size: \"mini\",\n    user: giguser\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 35\n  }, this), [giguser]);\n  const contactAvatar = useMemo(() => {\n    console.log('memo??????');\n    return /*#__PURE__*/_jsxDEV(ContactAvatar, {\n      size: \"mini\",\n      contact: contact\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 10\n    }, this);\n  }, [contact]);\n  useEffect(() => {\n    const stompClient = getStompClient();\n\n    sendChatMessage.current = message => {\n      stompClient.publish({\n        destination: '/msg/chat',\n        body: JSON.stringify(message)\n      });\n      dispatch(updateChatMessages(message));\n    };\n\n    const onMessageRecieved = msg => {\n      //TODO: get the contact and user from getState() and make this a custom hook or context\n      const notification = JSON.parse(msg.body);\n\n      if (contact.contactId === notification.senderId) {\n        dispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n      }\n    };\n\n    console.log('Gigety SubScribing .......');\n    const rxSubsciption = stompClient.watch(`/user/${giguser.id}/queue/messages`).subscribe(payload => onMessageRecieved(payload));\n    return () => {\n      if (stompClient) {\n        console.log('UNSUBSCRIBING ...');\n        rxSubsciption.unsubscribe();\n      }\n    };\n  }, [giguser, dispatch, contact.contactId, getStompClient]);\n  return /*#__PURE__*/_jsxDEV(Popup, {\n    trigger: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(UserLabel, {\n        userImageUrl: profile.userImageUrl,\n        email: profile.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this),\n    modal: true,\n    nested: true,\n    children: close => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [\"Send Direct Message to \", profile.email, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(ScrollToBottom, {\n          className: \"messages\",\n          children: /*#__PURE__*/_jsxDEV(List, {\n            children: messages ? messages.map(msg => {\n              const avatar = msg.senderId.toString() === giguser.id.toString() ? userAvatar : contactAvatar;\n              return /*#__PURE__*/_jsxDEV(List.Item, {\n                children: [avatar, /*#__PURE__*/_jsxDEV(List.Content, {\n                  children: /*#__PURE__*/_jsxDEV(List.Description, {\n                    children: msg.content\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 82,\n                    columnNumber: 15\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 14\n                }, this)]\n              }, msg.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 13\n              }, this);\n            }) : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n          activeContact: contact,\n          giguser: giguser,\n          sendChatMessage: sendChatMessage.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"actions\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          className: \"button\",\n          children: \" Go to Messages \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"button\",\n          onClick: close,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ChatModal, \"zazojll+35Ocxd2RaDkPMFb8yBw=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ChatModal;\nexport default ChatModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatModal\");","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatModal/ChatModal.js"],"names":["React","useContext","useEffect","useRef","useMemo","useDispatch","useSelector","Popup","ScrollToBottom","Button","List","UserLabel","use121ChatMessages","mapProfileToContact","findMessagesFor121Chat","updateChatMessages","MessageInput","StompRXClientContext","useMessenger","UserAvatar","ContactAvatar","ChatModal","profile","giguser","state","messages","id","userId","contact","getStompClient","sendChatMessage","dispatch","userAvatar","contactAvatar","console","log","stompClient","current","message","publish","destination","body","JSON","stringify","onMessageRecieved","msg","notification","parse","contactId","senderId","rxSubsciption","watch","subscribe","payload","unsubscribe","userImageUrl","email","close","map","avatar","toString","content"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useRef, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Popup from 'reactjs-popup';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { Button, List } from 'semantic-ui-react';\nimport 'reactjs-popup/dist/index.css';\nimport UserLabel from '../../User/UserLabel';\nimport './ChatModal.css';\nimport { use121ChatMessages } from 'redux/hooks/useMessages';\nimport { mapProfileToContact } from 'utils/objectMapper';\nimport { findMessagesFor121Chat, updateChatMessages } from 'redux/actions/messagesAction';\nimport MessageInput from '../MessageInput/MessageInput';\nimport { StompRXClientContext } from 'contexts/StompRXClientContext';\nimport { useMessenger } from '../../../redux/hooks/useMessages';\nimport UserAvatar from '../UserAvatar/UserAvatar';\nimport ContactAvatar from '../ContactAvatar/ContactAvatar';\nconst ChatModal = ({ profile }) => {\n\tconst { giguser } = useSelector((state) => state.giguser);\n\tconst messages = use121ChatMessages(giguser.id, profile.userId);\n\tconst contact = useMemo(() => mapProfileToContact(profile, giguser), [profile, giguser]);\n\tconst { getStompClient } = useContext(StompRXClientContext);\n\tconst sendChatMessage = useRef(null);\n\t//\tuseMessenger(giguser, contact, sendChatMessage);\n\tconst dispatch = useDispatch();\n\tconst userAvatar = useMemo(() => <UserAvatar size=\"mini\" user={giguser} />, [giguser]);\n\tconst contactAvatar = useMemo(() => {\n\t\tconsole.log('memo??????');\n\t\treturn <ContactAvatar size=\"mini\" contact={contact} />;\n\t}, [contact]);\n\tuseEffect(() => {\n\t\tconst stompClient = getStompClient();\n\t\tsendChatMessage.current = (message) => {\n\t\t\tstompClient.publish({ destination: '/msg/chat', body: JSON.stringify(message) });\n\t\t\tdispatch(updateChatMessages(message));\n\t\t};\n\n\t\tconst onMessageRecieved = (msg) => {\n\t\t\t//TODO: get the contact and user from getState() and make this a custom hook or context\n\t\t\tconst notification = JSON.parse(msg.body);\n\t\t\tif (contact.contactId === notification.senderId) {\n\t\t\t\tdispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n\t\t\t}\n\t\t};\n\t\tconsole.log('Gigety SubScribing .......');\n\t\tconst rxSubsciption = stompClient\n\t\t\t.watch(`/user/${giguser.id}/queue/messages`)\n\t\t\t.subscribe((payload) => onMessageRecieved(payload));\n\t\treturn () => {\n\t\t\tif (stompClient) {\n\t\t\t\tconsole.log('UNSUBSCRIBING ...');\n\t\t\t\trxSubsciption.unsubscribe();\n\t\t\t}\n\t\t};\n\t}, [giguser, dispatch, contact.contactId, getStompClient]);\n\n\treturn (\n\t\t<Popup\n\t\t\ttrigger={\n\t\t\t\t<div>\n\t\t\t\t\t<UserLabel userImageUrl={profile.userImageUrl} email={profile.email} />\n\t\t\t\t</div>\n\t\t\t}\n\t\t\tmodal\n\t\t\tnested\n\t\t>\n\t\t\t{(close) => (\n\t\t\t\t<div className=\"modal\">\n\t\t\t\t\t<div className=\"header\">Send Direct Message to {profile.email} </div>\n\t\t\t\t\t<div className=\"content\">\n\t\t\t\t\t\t<ScrollToBottom className=\"messages\">\n\t\t\t\t\t\t\t<List>\n\t\t\t\t\t\t\t\t{messages\n\t\t\t\t\t\t\t\t\t? messages.map((msg) => {\n\t\t\t\t\t\t\t\t\t\t\tconst avatar =\n\t\t\t\t\t\t\t\t\t\t\t\tmsg.senderId.toString() === giguser.id.toString()\n\t\t\t\t\t\t\t\t\t\t\t\t\t? userAvatar\n\t\t\t\t\t\t\t\t\t\t\t\t\t: contactAvatar;\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<List.Item key={msg.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{avatar}\n\t\t\t\t\t\t\t\t\t\t\t\t\t<List.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<List.Description>{msg.content}</List.Description>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</List.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t</List.Item>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t\t\t: ''}\n\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t</ScrollToBottom>\n\t\t\t\t\t\t<MessageInput\n\t\t\t\t\t\t\tactiveContact={contact}\n\t\t\t\t\t\t\tgiguser={giguser}\n\t\t\t\t\t\t\tsendChatMessage={sendChatMessage.current}\n\t\t\t\t\t\t></MessageInput>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"actions\">\n\t\t\t\t\t\t<Button className=\"button\"> Go to Messages </Button>\n\t\t\t\t\t\t<Button className=\"button\" onClick={close}>\n\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</Popup>\n\t);\n};\n\nexport default ChatModal;\n"]},"metadata":{},"sourceType":"module"}