{"ast":null,"code":"import { SET_PROFILE_CREATED_SUCCESS, SET_PROFILE_CREATED_ERROR, SET_PROFILE_CREATED_WAITING, GET_USER_PROFILE, REMOVE_PROFILE_SUCCESS } from './types';\nimport gigety from 'apis/gigety';\nexport const postGigProfile = (userProfile, images = [], history) => async dispatch => {\n  console.log('profile ::::::::::', userProfile);\n  const data = new FormData();\n  data.append('userProfile', userProfile);\n  console.log(images);\n\n  if (images) {\n    data.append('file', new FileList());\n  }\n\n  try {\n    console.log('gigety :: ', data);\n    const postedProfile = await gigety.post('/profiles/createProfile', data, {\n      headers: {\n        'content-type': 'multipart/form-data'\n      }\n    });\n    console.log('fuckuuuuuuu'); //TODO: Still needs to handle slow posts. I am thinking maybe have a spinner in a\n    //newly allocated profileLable on account page\n\n    dispatch({\n      type: SET_PROFILE_CREATED_WAITING,\n      payload: false\n    });\n    dispatch({\n      type: SET_PROFILE_CREATED_SUCCESS,\n      payload: postedProfile\n    });\n  } catch (error) {\n    console.error('Error creating user profile : ', error); //TODO: THis needs to be handled on UI\n\n    dispatch({\n      type: SET_PROFILE_CREATED_ERROR,\n      payload: error\n    });\n    throw error;\n  }\n\n  dispatch({\n    type: SET_PROFILE_CREATED_WAITING,\n    payload: true\n  });\n  history.push('/user/account');\n};\nexport const addProfileToProfileList = userProfile => (dispatch, getState) => {\n  const {\n    profileList\n  } = getState().userAccount;\n};\nexport const getUserProfile = id => async (dispatch, getState) => {\n  try {\n    const response = await gigety.get(`/pnode/profiles/${id}`);\n    dispatch({\n      type: GET_USER_PROFILE,\n      payload: response.data\n    });\n  } catch (error) {\n    console.error(`Error getting user profile for id ${id}`, error);\n    throw error;\n  }\n};\nexport const removeGigProfile = (id, history) => async dispatch => {\n  try {\n    const response = await gigety.delete(`/profiles/${id}`);\n    console.log(response.data);\n    dispatch({\n      type: REMOVE_PROFILE_SUCCESS,\n      payload: response.data\n    });\n    history.push('/user/account');\n  } catch (error) {\n    console.error(`Error  user profile for id ${id}`, error);\n    throw error;\n  }\n};","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/redux/actions/gigProfileAction.js"],"names":["SET_PROFILE_CREATED_SUCCESS","SET_PROFILE_CREATED_ERROR","SET_PROFILE_CREATED_WAITING","GET_USER_PROFILE","REMOVE_PROFILE_SUCCESS","gigety","postGigProfile","userProfile","images","history","dispatch","console","log","data","FormData","append","FileList","postedProfile","post","headers","type","payload","error","push","addProfileToProfileList","getState","profileList","userAccount","getUserProfile","id","response","get","removeGigProfile","delete"],"mappings":"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","sourcesContent":["import {\n\tSET_PROFILE_CREATED_SUCCESS,\n\tSET_PROFILE_CREATED_ERROR,\n\tSET_PROFILE_CREATED_WAITING,\n\tGET_USER_PROFILE,\n\tREMOVE_PROFILE_SUCCESS,\n} from './types';\nimport gigety from 'apis/gigety';\n\nexport const postGigProfile = (userProfile, images = [], history) => async (dispatch) => {\n\tconsole.log('profile ::::::::::', userProfile);\n\tconst data = new FormData();\n\tdata.append('userProfile', userProfile);\n\tconsole.log(images);\n\tif (images) {\n\t\tdata.append('file', new FileList());\n\t}\n\n\ttry {\n\t\tconsole.log('gigety :: ', data);\n\t\tconst postedProfile = await gigety.post('/profiles/createProfile', data, {\n\t\t\theaders: { 'content-type': 'multipart/form-data' },\n\t\t});\n\t\tconsole.log('fuckuuuuuuu');\n\t\t//TODO: Still needs to handle slow posts. I am thinking maybe have a spinner in a\n\t\t//newly allocated profileLable on account page\n\t\tdispatch({ type: SET_PROFILE_CREATED_WAITING, payload: false });\n\t\tdispatch({ type: SET_PROFILE_CREATED_SUCCESS, payload: postedProfile });\n\t} catch (error) {\n\t\tconsole.error('Error creating user profile : ', error);\n\t\t//TODO: THis needs to be handled on UI\n\t\tdispatch({ type: SET_PROFILE_CREATED_ERROR, payload: error });\n\t\tthrow error;\n\t}\n\tdispatch({ type: SET_PROFILE_CREATED_WAITING, payload: true });\n\thistory.push('/user/account');\n};\n\nexport const addProfileToProfileList = (userProfile) => (dispatch, getState) => {\n\tconst { profileList } = getState().userAccount;\n};\n\nexport const getUserProfile = (id) => async (dispatch, getState) => {\n\ttry {\n\t\tconst response = await gigety.get(`/pnode/profiles/${id}`);\n\t\tdispatch({ type: GET_USER_PROFILE, payload: response.data });\n\t} catch (error) {\n\t\tconsole.error(`Error getting user profile for id ${id}`, error);\n\t\tthrow error;\n\t}\n};\n\nexport const removeGigProfile = (id, history) => async (dispatch) => {\n\ttry {\n\t\tconst response = await gigety.delete(`/profiles/${id}`);\n\t\tconsole.log(response.data);\n\t\tdispatch({ type: REMOVE_PROFILE_SUCCESS, payload: response.data });\n\t\thistory.push('/user/account');\n\t} catch (error) {\n\t\tconsole.error(`Error  user profile for id ${id}`, error);\n\t\tthrow error;\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}