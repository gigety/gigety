{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/NotificationsScrollable/NotificationsScrollable.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useGigUser } from 'redux/hooks/useGigUser';\nimport _ from 'lodash';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { List, ListItem } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { findMessagesFor121Chat } from 'redux/actions/messagesAction';\nimport { useAllNewUserMessages } from 'redux/hooks/useMessages';\nimport { updateUserAccount } from 'redux/actions/gigUserAction';\n\nconst NotificationsScrollable = ({\n  giguser,\n  gigUserAccount\n}) => {\n  _s();\n\n  const allNewUserMessages = useAllNewUserMessages(giguser.id);\n  console.log('ALL Messages ', allNewUserMessages);\n\n  const messageNotifications = _.uniqBy(allNewUserMessages, message => 'senderName');\n\n  console.log(' Message Notifications ', messageNotifications);\n  const dispatch = useDispatch();\n\n  const getConversationMessages = ({\n    senderName,\n    senderId\n  }, event) => {\n    event.preventDefault(); //TODO: refactor Message to have a contact rather than senderId, senderName\n\n    dispatch(findMessagesFor121Chat(giguser.id, senderId));\n    const contact = {\n      contactId: senderId,\n      contactName: senderName\n    };\n    gigUserAccount.activeContact = contact;\n    const isContact = gigUserAccount.contacts.find(c => {\n      return c.contactId === contact.contactId;\n    });\n\n    if (!isContact) {\n      gigUserAccount.contacts = [...contact];\n    }\n\n    dispatch(updateUserAccount(gigUserAccount)); //dispatch(updateActiveContact(JSON.stringify(contact)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ScrollToBottom, {\n      children: /*#__PURE__*/_jsxDEV(List, {\n        children: messageNotifications ? messageNotifications.map(message => /*#__PURE__*/_jsxDEV(Link, {\n          children: /*#__PURE__*/_jsxDEV(ListItem, {\n            as: Link,\n            to: '/',\n            onClick: e => getConversationMessages(message, e),\n            children: /*#__PURE__*/_jsxDEV(List.Content, {\n              children: [/*#__PURE__*/_jsxDEV(List.Header, {\n                children: message.senderName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 12\n              }, this), /*#__PURE__*/_jsxDEV(List.Description, {\n                children: message.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 12\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 10\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }, this)) : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n\n_s(NotificationsScrollable, \"mXeYGctjm0b84+EJjpmBVLNuj+w=\", false, function () {\n  return [useAllNewUserMessages, useDispatch];\n});\n\n_c = NotificationsScrollable;\nexport default NotificationsScrollable;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotificationsScrollable\");","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/NotificationsScrollable/NotificationsScrollable.js"],"names":["React","useGigUser","_","ScrollToBottom","List","ListItem","Link","useDispatch","findMessagesFor121Chat","useAllNewUserMessages","updateUserAccount","NotificationsScrollable","giguser","gigUserAccount","allNewUserMessages","id","console","log","messageNotifications","uniqBy","message","dispatch","getConversationMessages","senderName","senderId","event","preventDefault","contact","contactId","contactName","activeContact","isContact","contacts","find","c","map","e","content"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useGigUser } from 'redux/hooks/useGigUser';\nimport _ from 'lodash';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { List, ListItem } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { findMessagesFor121Chat } from 'redux/actions/messagesAction';\nimport { useAllNewUserMessages } from 'redux/hooks/useMessages';\nimport { updateUserAccount } from 'redux/actions/gigUserAction';\nconst NotificationsScrollable = ({ giguser, gigUserAccount }) => {\n\tconst allNewUserMessages = useAllNewUserMessages(giguser.id);\n\tconsole.log('ALL Messages ', allNewUserMessages);\n\tconst messageNotifications = _.uniqBy(allNewUserMessages, (message) => 'senderName');\n\tconsole.log(' Message Notifications ', messageNotifications);\n\tconst dispatch = useDispatch();\n\tconst getConversationMessages = ({ senderName, senderId }, event) => {\n\t\tevent.preventDefault();\n\t\t//TODO: refactor Message to have a contact rather than senderId, senderName\n\n\t\tdispatch(findMessagesFor121Chat(giguser.id, senderId));\n\t\tconst contact = { contactId: senderId, contactName: senderName };\n\n\t\tgigUserAccount.activeContact = contact;\n\t\tconst isContact = gigUserAccount.contacts.find((c) => {\n\t\t\treturn c.contactId === contact.contactId;\n\t\t});\n\t\tif (!isContact) {\n\t\t\tgigUserAccount.contacts = [...contact];\n\t\t}\n\t\tdispatch(updateUserAccount(gigUserAccount));\n\t\t//dispatch(updateActiveContact(JSON.stringify(contact)));\n\t};\n\treturn (\n\t\t<>\n\t\t\t<ScrollToBottom>\n\t\t\t\t<List>\n\t\t\t\t\t{messageNotifications\n\t\t\t\t\t\t? messageNotifications.map((message) => (\n\t\t\t\t\t\t\t\t<Link>\n\t\t\t\t\t\t\t\t\t<ListItem as={Link} to={'/'} onClick={(e) => getConversationMessages(message, e)}>\n\t\t\t\t\t\t\t\t\t\t<List.Content>\n\t\t\t\t\t\t\t\t\t\t\t<List.Header>{message.senderName}</List.Header>\n\t\t\t\t\t\t\t\t\t\t\t<List.Description>{message.content}</List.Description>\n\t\t\t\t\t\t\t\t\t\t</List.Content>\n\t\t\t\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t  ))\n\t\t\t\t\t\t: ''}\n\t\t\t\t</List>\n\t\t\t</ScrollToBottom>\n\t\t</>\n\t);\n};\n\nexport default NotificationsScrollable;\n"]},"metadata":{},"sourceType":"module"}