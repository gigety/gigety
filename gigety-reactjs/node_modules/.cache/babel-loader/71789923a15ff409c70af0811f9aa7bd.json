{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatMessenger/ChatMessenger.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { use121ChatMessages, useMessenger } from 'redux/hooks/useMessages';\nimport { List } from 'semantic-ui-react';\nimport ContactAvatar from '../ContactAvatar/ContactAvatar';\nimport MessageInput from '../MessageInput/MessageInput';\n\nconst ChatMessenger = ({\n  activeContact\n}) => {\n  _s();\n\n  const {\n    giguser\n  } = useSelector(state => state.giguser);\n  console.log('Active COntact :::: ', activeContact);\n  const messages = use121ChatMessages(giguser.id, activeContact.contactId);\n  const sendChatMessage = useRef(null);\n  useMessenger(giguser, activeContact, sendChatMessage);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ScrollToBottom, {\n      className: \"messages\",\n      children: /*#__PURE__*/_jsxDEV(List, {\n        children: messages ? messages.map(msg => /*#__PURE__*/_jsxDEV(List.Item, {\n          children: [/*#__PURE__*/_jsxDEV(ContactAvatar, {\n            size: \"large\",\n            contact: activeContact\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(List.Content, {\n            children: /*#__PURE__*/_jsxDEV(List.Description, {\n              children: msg.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 10\n          }, this)]\n        }, msg.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 9\n        }, this)) : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      activeContact: activeContact,\n      giguser: giguser,\n      sendChatMessage: sendChatMessage.current\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChatMessenger, \"KpID9d/mkmPupbBC5McJ/Vc9hMI=\", false, function () {\n  return [useSelector, useMessenger];\n});\n\n_c = ChatMessenger;\nChatMessenger.propTypes = {\n  activeContact: PropTypes.shape({\n    contactId: PropTypes.string,\n    contactName: PropTypes.string,\n    contactImageUrl: PropTypes.string\n  })\n};\nChatMessenger.defaultProps = {\n  activeContact: {\n    contactId: '0'\n  }\n};\nexport default ChatMessenger;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatMessenger\");","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatMessenger/ChatMessenger.js"],"names":["React","useContext","useEffect","useRef","PropTypes","useDispatch","useSelector","ScrollToBottom","use121ChatMessages","useMessenger","List","ContactAvatar","MessageInput","ChatMessenger","activeContact","giguser","state","console","log","messages","id","contactId","sendChatMessage","map","msg","content","current","propTypes","shape","string","contactName","contactImageUrl","defaultProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,MAAvC,QAAqD,OAArD;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,SAASC,kBAAT,EAA6BC,YAA7B,QAAiD,yBAAjD;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,YAAP,MAAyB,8BAAzB;;AACA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuB;AAAA;;AAC5C,QAAM;AAAEC,IAAAA;AAAF,MAAcT,WAAW,CAAEU,KAAD,IAAWA,KAAK,CAACD,OAAlB,CAA/B;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCJ,aAApC;AACA,QAAMK,QAAQ,GAAGX,kBAAkB,CAACO,OAAO,CAACK,EAAT,EAAaN,aAAa,CAACO,SAA3B,CAAnC;AACA,QAAMC,eAAe,GAAGnB,MAAM,CAAC,IAAD,CAA9B;AACAM,EAAAA,YAAY,CAACM,OAAD,EAAUD,aAAV,EAAyBQ,eAAzB,CAAZ;AACA,sBACC;AAAA,4BACC,QAAC,cAAD;AAAgB,MAAA,SAAS,EAAC,UAA1B;AAAA,6BACC,QAAC,IAAD;AAAA,kBACEH,QAAQ,GACNA,QAAQ,CAACI,GAAT,CAAcC,GAAD,iBACb,QAAC,IAAD,CAAM,IAAN;AAAA,kCACC,QAAC,aAAD;AAAe,YAAA,IAAI,EAAC,OAApB;AAA4B,YAAA,OAAO,EAAEV;AAArC;AAAA;AAAA;AAAA;AAAA,kBADD,eAEC,QAAC,IAAD,CAAM,OAAN;AAAA,mCACC,QAAC,IAAD,CAAM,WAAN;AAAA,wBAAmBU,GAAG,CAACC;AAAvB;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,kBAFD;AAAA,WAAgBD,GAAG,CAACJ,EAApB;AAAA;AAAA;AAAA;AAAA,gBADA,CADM,GASN;AAVJ;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD,eAeC,QAAC,YAAD;AACC,MAAA,aAAa,EAAEN,aADhB;AAEC,MAAA,OAAO,EAAEC,OAFV;AAGC,MAAA,eAAe,EAAEO,eAAe,CAACI;AAHlC;AAAA;AAAA;AAAA;AAAA,YAfD;AAAA,kBADD;AAuBA,CA9BD;;GAAMb,a;UACeP,W,EAKpBG,Y;;;KANKI,a;AAgCNA,aAAa,CAACc,SAAd,GAA0B;AACzBb,EAAAA,aAAa,EAAEV,SAAS,CAACwB,KAAV,CAAgB;AAC9BP,IAAAA,SAAS,EAAEjB,SAAS,CAACyB,MADS;AAE9BC,IAAAA,WAAW,EAAE1B,SAAS,CAACyB,MAFO;AAG9BE,IAAAA,eAAe,EAAE3B,SAAS,CAACyB;AAHG,GAAhB;AADU,CAA1B;AAOAhB,aAAa,CAACmB,YAAd,GAA6B;AAC5BlB,EAAAA,aAAa,EAAE;AAAEO,IAAAA,SAAS,EAAE;AAAb;AADa,CAA7B;AAGA,eAAeR,aAAf","sourcesContent":["import React, { useContext, useEffect, useRef } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { use121ChatMessages, useMessenger } from 'redux/hooks/useMessages';\nimport { List } from 'semantic-ui-react';\nimport ContactAvatar from '../ContactAvatar/ContactAvatar';\nimport MessageInput from '../MessageInput/MessageInput';\nconst ChatMessenger = ({ activeContact }) => {\n\tconst { giguser } = useSelector((state) => state.giguser);\n\n\tconsole.log('Active COntact :::: ', activeContact);\n\tconst messages = use121ChatMessages(giguser.id, activeContact.contactId);\n\tconst sendChatMessage = useRef(null);\n\tuseMessenger(giguser, activeContact, sendChatMessage);\n\treturn (\n\t\t<>\n\t\t\t<ScrollToBottom className=\"messages\">\n\t\t\t\t<List>\n\t\t\t\t\t{messages\n\t\t\t\t\t\t? messages.map((msg) => (\n\t\t\t\t\t\t\t\t<List.Item key={msg.id}>\n\t\t\t\t\t\t\t\t\t<ContactAvatar size=\"large\" contact={activeContact} />\n\t\t\t\t\t\t\t\t\t<List.Content>\n\t\t\t\t\t\t\t\t\t\t<List.Description>{msg.content}</List.Description>\n\t\t\t\t\t\t\t\t\t</List.Content>\n\t\t\t\t\t\t\t\t</List.Item>\n\t\t\t\t\t\t  ))\n\t\t\t\t\t\t: ''}\n\t\t\t\t</List>\n\t\t\t</ScrollToBottom>\n\t\t\t<MessageInput\n\t\t\t\tactiveContact={activeContact}\n\t\t\t\tgiguser={giguser}\n\t\t\t\tsendChatMessage={sendChatMessage.current}\n\t\t\t></MessageInput>\n\t\t</>\n\t);\n};\n\nChatMessenger.propTypes = {\n\tactiveContact: PropTypes.shape({\n\t\tcontactId: PropTypes.string,\n\t\tcontactName: PropTypes.string,\n\t\tcontactImageUrl: PropTypes.string,\n\t}),\n};\nChatMessenger.defaultProps = {\n\tactiveContact: { contactId: '0' },\n};\nexport default ChatMessenger;\n"]},"metadata":{},"sourceType":"module"}