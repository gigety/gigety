{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/contexts/StompRXClientContext.js\";\nimport React, { createContext } from 'react';\nimport EventEmitter from 'eventemitter3';\nimport { GIGETY_MESSENGER_STOMP_URL } from '../constants';\nimport { RxStomp } from '@stomp/rx-stomp';\nimport SockJS from 'sockjs-client';\nconst StompRXClientContext = /*#__PURE__*/createContext(null);\nexport { StompRXClientContext };\n/**\n * Context to provide methods to activate, get, remove, add / remove listeners\n * to a Client object of the @stomp/stompjs library\n * @param {*} param0\n */\n\nconst MessageContext = ({\n  children\n}) => {\n  let _stompClient = null;\n  let wrappedStompClient = null;\n\n  const log = str => console.log(str);\n\n  const warn = str => console.warn(str);\n\n  const error = str => console.error(str);\n\n  const stompEvent = new EventEmitter();\n  const stompEventTypes = {\n    Connect: 0,\n    Disconnect: 1,\n    Error: 2,\n    WebSocketClose: 3,\n    WebSocketError: 4\n  };\n  const accessToken = localStorage.getItem('jwtToken');\n  const securedUrl = GIGETY_MESSENGER_STOMP_URL + '?access_token=' + accessToken;\n  log('SECUREDURL :::::  ' + securedUrl);\n\n  const activateStompClient = ({\n    url = securedUrl,\n    login,\n    passcode,\n    host,\n    debug = str => log(str)\n  }) => {\n    log('Creating StompClient ...');\n    const stompConfig = {\n      brokerURL: url,\n      connectHeaders: {\n        login,\n        passcode,\n        host,\n        'X-XSRF-TOKEN': accessToken\n      },\n      debug: debug,\n      reconnectDelay: 200,\n      heartbeatIncoming: 500,\n      heartbeatOutgoing: 4000,\n      logRawCommunication: false,\n      webSocketFactory: () => {\n        return SockJS(url);\n      },\n      onStompError: frame => {\n        error(`Gigety Stomp Error :: ${frame}`);\n        error(frame);\n        stompEvent.emit(stompEventTypes.Error);\n      },\n      onConnect: frame => {\n        log(`Gigety Stomp Connect :: ${frame}`);\n        log(frame);\n        stompEvent.emit(stompEventTypes.Connect);\n      },\n      onDisconnect: frame => {\n        warn(`Gigety Stomp Disconnect :: ${frame}`);\n        warn(frame);\n        stompEvent.emit(stompEventTypes.Disconnect);\n      },\n      onWebSocketClose: frame => {\n        log(`Gigety WebSocket Close :: ${frame}`);\n        log(frame);\n        stompEvent.emit(stompEventTypes.WebSocketClose);\n      },\n      onWebSocketError: frame => {\n        error(`Gigety WebSocket Error :: ${frame}`);\n        error(frame);\n        stompEvent.emit(stompEventTypes.WebSocketError);\n      }\n    };\n    _stompClient = new RxStomp();\n\n    _stompClient.configure(stompConfig);\n\n    _stompClient.activate();\n\n    return _stompClient;\n  };\n\n  const deactivateStompClient = () => {\n    if (_stompClient) {\n      log('Deactivating StompClient');\n\n      _stompClient.deactivate();\n    }\n  };\n\n  const getStompClient = () => {\n    return _stompClient;\n  };\n\n  const removeStompClient = () => {\n    if (_stompClient) {\n      log('Deacitvating StompClient');\n\n      _stompClient.deactivate();\n\n      _stompClient = null;\n    }\n  };\n\n  const addStompEventListener = ({\n    eventType,\n    emitted,\n    context,\n    isOnce\n  }) => {\n    log(`Adding Event Type ${eventType}`);\n\n    if (isOnce) {\n      stompEvent.once(eventType, emitted, context);\n    } else {\n      stompEvent.on(eventType, emitted, context);\n    }\n  };\n\n  const removeStompEventListener = (eventType, emmited, context) => {\n    log('Removing Event Listener for {}', eventType);\n    stompEvent.removeListener(eventType, emmited, context);\n  };\n\n  wrappedStompClient = {\n    activateStompClient,\n    removeStompClient,\n    getStompClient,\n    addStompEventListener,\n    removeStompEventListener,\n    deactivateStompClient,\n    stompEventTypes\n  };\n  log(`CONFIGURATION:::: wrappedStompClient = ${wrappedStompClient}`);\n  log('Activating StompClient in StompClientContext ...');\n  activateStompClient({\n    debug: f => f\n  });\n  return /*#__PURE__*/_jsxDEV(StompRXClientContext.Provider, {\n    value: wrappedStompClient,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n};\n\n_c = MessageContext;\nexport default MessageContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageContext\");","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/contexts/StompRXClientContext.js"],"names":["React","createContext","EventEmitter","GIGETY_MESSENGER_STOMP_URL","RxStomp","SockJS","StompRXClientContext","MessageContext","children","_stompClient","wrappedStompClient","log","str","console","warn","error","stompEvent","stompEventTypes","Connect","Disconnect","Error","WebSocketClose","WebSocketError","accessToken","localStorage","getItem","securedUrl","activateStompClient","url","login","passcode","host","debug","stompConfig","brokerURL","connectHeaders","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","logRawCommunication","webSocketFactory","onStompError","frame","emit","onConnect","onDisconnect","onWebSocketClose","onWebSocketError","configure","activate","deactivateStompClient","deactivate","getStompClient","removeStompClient","addStompEventListener","eventType","emitted","context","isOnce","once","on","removeStompEventListener","emmited","removeListener","f"],"mappings":"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","sourcesContent":["import React, { createContext } from 'react';\nimport EventEmitter from 'eventemitter3';\nimport { GIGETY_MESSENGER_STOMP_URL } from '../constants';\nimport { RxStomp } from '@stomp/rx-stomp';\nimport SockJS from 'sockjs-client';\n\nconst StompRXClientContext = createContext(null);\nexport { StompRXClientContext };\n\n/**\n * Context to provide methods to activate, get, remove, add / remove listeners\n * to a Client object of the @stomp/stompjs library\n * @param {*} param0\n */\nconst MessageContext = ({ children }) => {\n\tlet _stompClient = null;\n\tlet wrappedStompClient = null;\n\tconst log = (str) => console.log(str);\n\tconst warn = (str) => console.warn(str);\n\tconst error = (str) => console.error(str);\n\tconst stompEvent = new EventEmitter();\n\tconst stompEventTypes = {\n\t\tConnect: 0,\n\t\tDisconnect: 1,\n\t\tError: 2,\n\t\tWebSocketClose: 3,\n\t\tWebSocketError: 4,\n\t};\n\tconst accessToken = localStorage.getItem('jwtToken');\n\tconst securedUrl = GIGETY_MESSENGER_STOMP_URL + '?access_token=' + accessToken;\n\tlog('SECUREDURL :::::  ' + securedUrl);\n\tconst activateStompClient = ({ url = securedUrl, login, passcode, host, debug = (str) => log(str) }) => {\n\t\tlog('Creating StompClient ...');\n\n\t\tconst stompConfig = {\n\t\t\tbrokerURL: url,\n\t\t\tconnectHeaders: { login, passcode, host, 'X-XSRF-TOKEN': accessToken },\n\t\t\tdebug: debug,\n\t\t\treconnectDelay: 200,\n\t\t\theartbeatIncoming: 500,\n\t\t\theartbeatOutgoing: 4000,\n\t\t\tlogRawCommunication: false,\n\t\t\twebSocketFactory: () => {\n\t\t\t\treturn SockJS(url);\n\t\t\t},\n\t\t\tonStompError: (frame) => {\n\t\t\t\terror(`Gigety Stomp Error :: ${frame}`);\n\t\t\t\terror(frame);\n\t\t\t\tstompEvent.emit(stompEventTypes.Error);\n\t\t\t},\n\t\t\tonConnect: (frame) => {\n\t\t\t\tlog(`Gigety Stomp Connect :: ${frame}`);\n\t\t\t\tlog(frame);\n\t\t\t\tstompEvent.emit(stompEventTypes.Connect);\n\t\t\t},\n\t\t\tonDisconnect: (frame) => {\n\t\t\t\twarn(`Gigety Stomp Disconnect :: ${frame}`);\n\t\t\t\twarn(frame);\n\t\t\t\tstompEvent.emit(stompEventTypes.Disconnect);\n\t\t\t},\n\t\t\tonWebSocketClose: (frame) => {\n\t\t\t\tlog(`Gigety WebSocket Close :: ${frame}`);\n\t\t\t\tlog(frame);\n\t\t\t\tstompEvent.emit(stompEventTypes.WebSocketClose);\n\t\t\t},\n\t\t\tonWebSocketError: (frame) => {\n\t\t\t\terror(`Gigety WebSocket Error :: ${frame}`);\n\t\t\t\terror(frame);\n\t\t\t\tstompEvent.emit(stompEventTypes.WebSocketError);\n\t\t\t},\n\t\t};\n\t\t_stompClient = new RxStomp();\n\t\t_stompClient.configure(stompConfig);\n\t\t_stompClient.activate();\n\t\treturn _stompClient;\n\t};\n\tconst deactivateStompClient = () => {\n\t\tif (_stompClient) {\n\t\t\tlog('Deactivating StompClient');\n\t\t\t_stompClient.deactivate();\n\t\t}\n\t};\n\tconst getStompClient = () => {\n\t\treturn _stompClient;\n\t};\n\tconst removeStompClient = () => {\n\t\tif (_stompClient) {\n\t\t\tlog('Deacitvating StompClient');\n\t\t\t_stompClient.deactivate();\n\t\t\t_stompClient = null;\n\t\t}\n\t};\n\tconst addStompEventListener = ({ eventType, emitted, context, isOnce }) => {\n\t\tlog(`Adding Event Type ${eventType}`);\n\t\tif (isOnce) {\n\t\t\tstompEvent.once(eventType, emitted, context);\n\t\t} else {\n\t\t\tstompEvent.on(eventType, emitted, context);\n\t\t}\n\t};\n\tconst removeStompEventListener = (eventType, emmited, context) => {\n\t\tlog('Removing Event Listener for {}', eventType);\n\t\tstompEvent.removeListener(eventType, emmited, context);\n\t};\n\twrappedStompClient = {\n\t\tactivateStompClient,\n\t\tremoveStompClient,\n\t\tgetStompClient,\n\t\taddStompEventListener,\n\t\tremoveStompEventListener,\n\t\tdeactivateStompClient,\n\t\tstompEventTypes,\n\t};\n\n\tlog(`CONFIGURATION:::: wrappedStompClient = ${wrappedStompClient}`);\n\tlog('Activating StompClient in StompClientContext ...');\n\tactivateStompClient({ debug: (f) => f });\n\treturn <StompRXClientContext.Provider value={wrappedStompClient}>{children}</StompRXClientContext.Provider>;\n};\n\nexport default MessageContext;\n"]},"metadata":{},"sourceType":"module"}