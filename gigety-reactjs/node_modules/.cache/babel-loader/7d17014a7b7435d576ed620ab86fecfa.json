{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/contexts/StompClientContext.js\";\nimport React, { createContext } from 'react';\nimport EventEmitter from 'eventemitter3';\nimport { GIGETY_MESSENGER_STOMP_URL } from '../constants';\nimport { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst StompClientContext = /*#__PURE__*/createContext(null);\nexport { StompClientContext };\n\nconst MessageContext = ({\n  children\n}) => {\n  let _stompClient = null;\n  let wrappedStompClient = null;\n\n  const log = str => console.log(str);\n\n  const stompEvent = new EventEmitter();\n  const stompEventTypes = {\n    Connect: 0,\n    Disconnect: 1,\n    Error: 2,\n    WebSocketClose: 3,\n    WebSocketError: 4\n  };\n\n  const activateStompClient = ({\n    url = GIGETY_MESSENGER_STOMP_URL,\n    login,\n    passcode,\n    host,\n    debug = str => log(str)\n  }) => {\n    log('Creating StompClient ...');\n    _stompClient = new Client({\n      brokerURL: url,\n      connectHeaders: {\n        login,\n        passcode,\n        host\n      },\n      debug: debug,\n      reconnectDelay: 200,\n      heartbeatIncoming: 500,\n      heartbeatOutgoing: 4000,\n      logRawCommunication: false,\n      webSocketFactory: () => {\n        return SockJS(url);\n      },\n      onStompError: frame => {\n        log('Gigety Stomp Error :: ');\n        log(frame);\n        stompEvent.emit(stompEventTypes.Error);\n      },\n      onConnect: frame => {\n        log('Gigety Stomp Connec ::');\n        log(frame);\n        stompEvent.emit(stompEventTypes.Connect);\n      },\n      onDisconnect: frame => {\n        log('Gigety Stomp Disconnect ::');\n        log(frame);\n        stompEvent.emit(stompEventTypes.Disconnect);\n      },\n      onWebSocketClose: frame => {\n        log('Gigety WebSocket Close ::');\n        log(frame);\n        stompEvent.emit(stompEventTypes.WebSocketClose);\n      },\n      onWebSocketError: frame => {\n        log('Gigety WebSocket Error ::');\n        log(frame);\n        stompEvent.emit(stompEventTypes.WebSocketError);\n      }\n    });\n\n    _stompClient.activate();\n\n    return _stompClient;\n  };\n\n  const getStompClient = () => {\n    return _stompClient;\n  };\n\n  const removeStompClient = () => {\n    if (_stompClient) {\n      log('Deacitvating StompClient');\n\n      _stompClient.deactivate();\n\n      _stompClient = null;\n    }\n  };\n\n  const addStompEventListener = (eventType, emitted, context, isOnce) => {\n    log('Adding Event Type {}', eventType);\n\n    if (isOnce) {\n      stompEvent.once(eventType, emitted, context);\n    } else {\n      stompEvent.on(eventType, emitted, context);\n    }\n  };\n\n  const removeStompEventListener = (eventType, emmited, context) => {\n    log('Removing Event Listener for {}', eventType);\n    stompEvent.removeListener(eventType, emmited, context);\n  };\n\n  wrappedStompClient = {\n    activateStompClient,\n    removeStompClient,\n    getStompClient,\n    addStompEventListener,\n    removeStompEventListener,\n    stompEventTypes\n  };\n  log(`CONFIGURATION:::: wrappedStompClient = ${wrappedStompClient}`);\n  log('Activating StompClient in StompClientContext ...');\n  activateStompClient({\n    debug: f => f\n  });\n  return /*#__PURE__*/_jsxDEV(StompClientContext.Provider, {\n    value: wrappedStompClient,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n\n_c = MessageContext;\nexport default MessageContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageContext\");","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/contexts/StompClientContext.js"],"names":["React","createContext","EventEmitter","GIGETY_MESSENGER_STOMP_URL","Client","SockJS","StompClientContext","MessageContext","children","_stompClient","wrappedStompClient","log","str","console","stompEvent","stompEventTypes","Connect","Disconnect","Error","WebSocketClose","WebSocketError","activateStompClient","url","login","passcode","host","debug","brokerURL","connectHeaders","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","logRawCommunication","webSocketFactory","onStompError","frame","emit","onConnect","onDisconnect","onWebSocketClose","onWebSocketError","activate","getStompClient","removeStompClient","deactivate","addStompEventListener","eventType","emitted","context","isOnce","once","on","removeStompEventListener","emmited","removeListener","f"],"mappings":"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","sourcesContent":["import React, { createContext } from 'react';\nimport EventEmitter from 'eventemitter3';\nimport { GIGETY_MESSENGER_STOMP_URL } from '../constants';\nimport { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst StompClientContext = createContext(null);\nexport { StompClientContext };\n\nconst MessageContext = ({ children }) => {\n\tlet _stompClient = null;\n\tlet wrappedStompClient = null;\n\tconst log = (str) => console.log(str);\n\tconst stompEvent = new EventEmitter();\n\tconst stompEventTypes = {\n\t\tConnect: 0,\n\t\tDisconnect: 1,\n\t\tError: 2,\n\t\tWebSocketClose: 3,\n\t\tWebSocketError: 4,\n\t};\n\tconst activateStompClient = ({\n\t\turl = GIGETY_MESSENGER_STOMP_URL,\n\t\tlogin,\n\t\tpasscode,\n\t\thost,\n\t\tdebug = (str) => log(str),\n\t}) => {\n\t\tlog('Creating StompClient ...');\n\n\t\t_stompClient = new Client({\n\t\t\tbrokerURL: url,\n\t\t\tconnectHeaders: { login, passcode, host },\n\t\t\tdebug: debug,\n\t\t\treconnectDelay: 200,\n\t\t\theartbeatIncoming: 500,\n\t\t\theartbeatOutgoing: 4000,\n\t\t\tlogRawCommunication: false,\n\t\t\twebSocketFactory: () => {\n\t\t\t\treturn SockJS(url);\n\t\t\t},\n\t\t\tonStompError: (frame) => {\n\t\t\t\tlog('Gigety Stomp Error :: ');\n\t\t\t\tlog(frame);\n\t\t\t\tstompEvent.emit(stompEventTypes.Error);\n\t\t\t},\n\t\t\tonConnect: (frame) => {\n\t\t\t\tlog('Gigety Stomp Connec ::');\n\t\t\t\tlog(frame);\n\t\t\t\tstompEvent.emit(stompEventTypes.Connect);\n\t\t\t},\n\t\t\tonDisconnect: (frame) => {\n\t\t\t\tlog('Gigety Stomp Disconnect ::');\n\t\t\t\tlog(frame);\n\t\t\t\tstompEvent.emit(stompEventTypes.Disconnect);\n\t\t\t},\n\t\t\tonWebSocketClose: (frame) => {\n\t\t\t\tlog('Gigety WebSocket Close ::');\n\t\t\t\tlog(frame);\n\t\t\t\tstompEvent.emit(stompEventTypes.WebSocketClose);\n\t\t\t},\n\t\t\tonWebSocketError: (frame) => {\n\t\t\t\tlog('Gigety WebSocket Error ::');\n\t\t\t\tlog(frame);\n\t\t\t\tstompEvent.emit(stompEventTypes.WebSocketError);\n\t\t\t},\n\t\t});\n\t\t_stompClient.activate();\n\t\treturn _stompClient;\n\t};\n\tconst getStompClient = () => {\n\t\treturn _stompClient;\n\t};\n\tconst removeStompClient = () => {\n\t\tif (_stompClient) {\n\t\t\tlog('Deacitvating StompClient');\n\t\t\t_stompClient.deactivate();\n\t\t\t_stompClient = null;\n\t\t}\n\t};\n\tconst addStompEventListener = (eventType, emitted, context, isOnce) => {\n\t\tlog('Adding Event Type {}', eventType);\n\t\tif (isOnce) {\n\t\t\tstompEvent.once(eventType, emitted, context);\n\t\t} else {\n\t\t\tstompEvent.on(eventType, emitted, context);\n\t\t}\n\t};\n\tconst removeStompEventListener = (eventType, emmited, context) => {\n\t\tlog('Removing Event Listener for {}', eventType);\n\t\tstompEvent.removeListener(eventType, emmited, context);\n\t};\n\twrappedStompClient = {\n\t\tactivateStompClient,\n\t\tremoveStompClient,\n\t\tgetStompClient,\n\t\taddStompEventListener,\n\t\tremoveStompEventListener,\n\t\tstompEventTypes,\n\t};\n\n\tlog(`CONFIGURATION:::: wrappedStompClient = ${wrappedStompClient}`);\n\tlog('Activating StompClient in StompClientContext ...');\n\tactivateStompClient({ debug: (f) => f });\n\treturn <StompClientContext.Provider value={wrappedStompClient}>{children}</StompClientContext.Provider>;\n};\n\nexport default MessageContext;\n"]},"metadata":{},"sourceType":"module"}