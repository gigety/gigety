{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatModal/ChatModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Popup from 'reactjs-popup';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { Button, Input, List } from 'semantic-ui-react';\nimport 'reactjs-popup/dist/index.css';\nimport UserLabel from '../../User/UserLabel';\nimport ProfileUserImage from '../../Profile/ProfileUserImage';\nimport './ChatModal.css';\nimport { StompClientContext } from 'contexts/StompClientContext';\nimport { use121ChatMessages } from 'redux/hooks/useMessages';\nimport { findMessagesFor121Chat } from 'redux/actions/messagesAction';\n\nconst ChatModal = ({\n  profile\n}) => {\n  _s();\n\n  console.log('profile :: ', profile);\n  const {\n    giguser\n  } = useSelector(state => state.giguser);\n  const messages = use121ChatMessages(giguser.id, profile.id);\n  const [text, setText] = useState('');\n  const dispatch = useDispatch();\n  const {\n    stompClient,\n    sendChatMessage\n  } = useContext(StompClientContext);\n  useEffect(() => {\n    const onMessageRecieved = msg => {\n      const notification = JSON.parse(msg.body);\n\n      if (profile.userId === notification.senderId) {\n        dispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n      }\n    };\n\n    const id = stompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved); //const id = stompClient.subscribe(`/queue/messages/${profile.id}`, onMessageRecieved);\n\n    console.log(id);\n    return () => {\n      console.log(`here we unsubscibe to id ${id}, you best check this is proper way to unsubscribe`);\n      stompClient.unsubscribe(id);\n    };\n  }, [giguser, profile, stompClient, dispatch]);\n\n  const sendTheMessage = msg => {\n    if (msg.trim() !== '') {\n      const message = {\n        senderId: giguser.id,\n        recipientId: profile.id,\n        senderName: giguser.name,\n        recipientName: profile.email,\n        content: msg,\n        timestamp: new Date()\n      };\n      console.log('sending msg: ', msg);\n      sendChatMessage(message);\n      console.log('msg sent', message);\n    }\n  };\n\n  const messageSent = () => {};\n\n  return /*#__PURE__*/_jsxDEV(Popup, {\n    trigger: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(UserLabel, {\n        userImageUrl: profile.userImageUrl,\n        email: profile.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }, this),\n    modal: true,\n    nested: true,\n    children: close => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [\"Send Direct Message to \", profile.email, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(ScrollToBottom, {\n          className: \"messages\",\n          children: /*#__PURE__*/_jsxDEV(List, {\n            children: messages ? messages.map(msg => /*#__PURE__*/_jsxDEV(List.Item, {\n              children: [/*#__PURE__*/_jsxDEV(ProfileUserImage, {\n                size: \"mini\",\n                profile: profile\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(List.Content, {\n                children: [/*#__PURE__*/_jsxDEV(List.Header, {\n                  as: \"a\",\n                  children: profile.profileName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 75,\n                  columnNumber: 14\n                }, this), /*#__PURE__*/_jsxDEV(List.Description, {\n                  children: msg.content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 14\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 12\n            }, this)) : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"Enter Message\",\n          action: true,\n          fluid: true,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            value: text,\n            onChange: e => setText(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              sendTheMessage(text);\n              setText('');\n            },\n            children: \"Send Message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"actions\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          className: \"button\",\n          children: \" Go to Messages \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"button\",\n          onClick: () => {\n            console.log('modal closed ');\n            close();\n          },\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ChatModal, \"qJD61EFvSPjuz+75PLHiPmAxryE=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ChatModal;\nexport default ChatModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatModal\");","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatModal/ChatModal.js"],"names":["React","useContext","useEffect","useState","useDispatch","useSelector","Popup","ScrollToBottom","Button","Input","List","UserLabel","ProfileUserImage","StompClientContext","use121ChatMessages","findMessagesFor121Chat","ChatModal","profile","console","log","giguser","state","messages","id","text","setText","dispatch","stompClient","sendChatMessage","onMessageRecieved","msg","notification","JSON","parse","body","userId","senderId","subscribe","unsubscribe","sendTheMessage","trim","message","recipientId","senderName","name","recipientName","email","content","timestamp","Date","messageSent","userImageUrl","close","map","profileName","e","target","value"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Popup from 'reactjs-popup';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { Button, Input, List } from 'semantic-ui-react';\nimport 'reactjs-popup/dist/index.css';\nimport UserLabel from '../../User/UserLabel';\nimport ProfileUserImage from '../../Profile/ProfileUserImage';\nimport './ChatModal.css';\nimport { StompClientContext } from 'contexts/StompClientContext';\nimport { use121ChatMessages } from 'redux/hooks/useMessages';\nimport { findMessagesFor121Chat } from 'redux/actions/messagesAction';\n\nconst ChatModal = ({ profile }) => {\n\tconsole.log('profile :: ', profile);\n\tconst { giguser } = useSelector((state) => state.giguser);\n\tconst messages = use121ChatMessages(giguser.id, profile.id);\n\tconst [text, setText] = useState('');\n\tconst dispatch = useDispatch();\n\tconst { stompClient, sendChatMessage } = useContext(StompClientContext);\n\tuseEffect(() => {\n\t\tconst onMessageRecieved = (msg) => {\n\t\t\tconst notification = JSON.parse(msg.body);\n\t\t\tif (profile.userId === notification.senderId) {\n\t\t\t\tdispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n\t\t\t}\n\t\t};\n\t\tconst id = stompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved);\n\t\t//const id = stompClient.subscribe(`/queue/messages/${profile.id}`, onMessageRecieved);\n\t\tconsole.log(id);\n\n\t\treturn () => {\n\t\t\tconsole.log(`here we unsubscibe to id ${id}, you best check this is proper way to unsubscribe`);\n\t\t\tstompClient.unsubscribe(id);\n\t\t};\n\t}, [giguser, profile, stompClient, dispatch]);\n\n\tconst sendTheMessage = (msg) => {\n\t\tif (msg.trim() !== '') {\n\t\t\tconst message = {\n\t\t\t\tsenderId: giguser.id,\n\t\t\t\trecipientId: profile.id,\n\t\t\t\tsenderName: giguser.name,\n\t\t\t\trecipientName: profile.email,\n\t\t\t\tcontent: msg,\n\t\t\t\ttimestamp: new Date(),\n\t\t\t};\n\t\t\tconsole.log('sending msg: ', msg);\n\t\t\tsendChatMessage(message);\n\t\t\tconsole.log('msg sent', message);\n\t\t}\n\t};\n\tconst messageSent = () => {};\n\treturn (\n\t\t<Popup\n\t\t\ttrigger={\n\t\t\t\t<div>\n\t\t\t\t\t<UserLabel userImageUrl={profile.userImageUrl} email={profile.email} />\n\t\t\t\t</div>\n\t\t\t}\n\t\t\tmodal\n\t\t\tnested\n\t\t>\n\t\t\t{(close) => (\n\t\t\t\t<div className=\"modal\">\n\t\t\t\t\t<div className=\"header\">Send Direct Message to {profile.email} </div>\n\t\t\t\t\t<div className=\"content\">\n\t\t\t\t\t\t<ScrollToBottom className=\"messages\">\n\t\t\t\t\t\t\t<List>\n\t\t\t\t\t\t\t\t{messages\n\t\t\t\t\t\t\t\t\t? messages.map((msg) => (\n\t\t\t\t\t\t\t\t\t\t\t<List.Item>\n\t\t\t\t\t\t\t\t\t\t\t\t<ProfileUserImage size=\"mini\" profile={profile} />\n\t\t\t\t\t\t\t\t\t\t\t\t<List.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<List.Header as=\"a\">{profile.profileName}</List.Header>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<List.Description>{msg.content}</List.Description>\n\t\t\t\t\t\t\t\t\t\t\t\t</List.Content>\n\t\t\t\t\t\t\t\t\t\t\t</List.Item>\n\t\t\t\t\t\t\t\t\t  ))\n\t\t\t\t\t\t\t\t\t: ''}\n\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t</ScrollToBottom>\n\n\t\t\t\t\t\t<Input placeholder=\"Enter Message\" action fluid>\n\t\t\t\t\t\t\t<input value={text} onChange={(e) => setText(e.target.value)} />\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tsendTheMessage(text);\n\t\t\t\t\t\t\t\t\tsetText('');\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tSend Message\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Input>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"actions\">\n\t\t\t\t\t\t<Button className=\"button\"> Go to Messages </Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName=\"button\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tconsole.log('modal closed ');\n\t\t\t\t\t\t\t\tclose();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</Popup>\n\t);\n};\n\nexport default ChatModal;\n"]},"metadata":{},"sourceType":"module"}