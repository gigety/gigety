{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatMessenger/ChatMessenger.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState, useCallback } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { use121ChatMessages } from 'redux/hooks/useMessages';\nimport { List } from 'semantic-ui-react';\nimport ContactAvatar from '../ContactAvatar/ContactAvatar';\nimport MessageInput from '../MessageInput/MessageInput';\nimport { findMessagesFor121Chat } from 'redux/actions/messagesAction';\nimport { GIGETY_MESSENGER_URL } from '../../../constants';\n\nconst ChatMessenger = ({\n  activeContact\n}) => {\n  _s();\n\n  const {\n    giguser\n  } = useSelector(state => state.giguser);\n  console.log('Active COntact :::: ', activeContact);\n  const messages = use121ChatMessages(giguser.id, activeContact.contactId); //useMessenger(giguser, activeContact);\n  //onst { stompClient } = useContext(StompClientContext);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    let subId = '';\n\n    const stomp = require('stompjs');\n\n    let SockJS = require('sockjs-client');\n\n    SockJS = new SockJS(GIGETY_MESSENGER_URL + '/ws');\n\n    SockJS.onopen = () => {\n      console.log('SOCKJS is CONNECTED AND OPEN FOR MESSAGING');\n    };\n\n    SockJS.onmessage = message => {\n      console.log('SOCKJS RECIEVED A MESSAGE :: ', message);\n    };\n\n    SockJS.onclose = () => {\n      stompClient.unsubscribe(subId);\n    };\n\n    const stompClient = stomp.over(SockJS);\n\n    stompClient.debug = f => f;\n\n    const onError = error => {\n      console.log('ERRRRRRRRRRRRRRR : ', error);\n    };\n\n    const onConnected = () => {\n      const onMessageRecieved = msg => {\n        const notification = JSON.parse(msg.body);\n\n        if (activeContact.contactId === notification.senderId) {\n          dispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n        }\n      };\n\n      const {\n        id\n      } = stompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved);\n      subId = id;\n    };\n\n    stompClient.connect({}, onConnected, onError);\n  }, [giguser, dispatch, activeContact]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ScrollToBottom, {\n      className: \"messages\",\n      children: /*#__PURE__*/_jsxDEV(List, {\n        children: messages ? messages.map(msg => /*#__PURE__*/_jsxDEV(List.Item, {\n          children: [/*#__PURE__*/_jsxDEV(ContactAvatar, {\n            size: \"med\",\n            contact: activeContact\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(List.Content, {\n            children: /*#__PURE__*/_jsxDEV(List.Description, {\n              children: msg.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 10\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }, this)) : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      activeContact: activeContact,\n      giguser: giguser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChatMessenger, \"Uj2fb0jXdINaVGVLXeJ3TyLOynA=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ChatMessenger;\nChatMessenger.propTypes = {\n  activeContact: {\n    contactId: PropTypes.string\n  }\n};\nChatMessenger.defaultProps = {\n  activeContact: {\n    contactId: '0'\n  }\n};\nexport default ChatMessenger;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatMessenger\");","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatMessenger/ChatMessenger.js"],"names":["React","useContext","useEffect","useState","useCallback","PropTypes","useDispatch","useSelector","ScrollToBottom","use121ChatMessages","List","ContactAvatar","MessageInput","findMessagesFor121Chat","GIGETY_MESSENGER_URL","ChatMessenger","activeContact","giguser","state","console","log","messages","id","contactId","dispatch","subId","stomp","require","SockJS","onopen","onmessage","message","onclose","stompClient","unsubscribe","over","debug","f","onError","error","onConnected","onMessageRecieved","msg","notification","JSON","parse","body","senderId","subscribe","connect","map","content","propTypes","string","defaultProps"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState, useCallback } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { use121ChatMessages } from 'redux/hooks/useMessages';\nimport { List } from 'semantic-ui-react';\nimport ContactAvatar from '../ContactAvatar/ContactAvatar';\nimport MessageInput from '../MessageInput/MessageInput';\nimport { findMessagesFor121Chat } from 'redux/actions/messagesAction';\nimport { GIGETY_MESSENGER_URL } from '../../../constants';\nconst ChatMessenger = ({ activeContact }) => {\n\tconst { giguser } = useSelector((state) => state.giguser);\n\tconsole.log('Active COntact :::: ', activeContact);\n\tconst messages = use121ChatMessages(giguser.id, activeContact.contactId);\n\t//useMessenger(giguser, activeContact);\n\t//onst { stompClient } = useContext(StompClientContext);\n\tconst dispatch = useDispatch();\n\tuseEffect(() => {\n\t\tlet subId = '';\n\t\tconst stomp = require('stompjs');\n\t\tlet SockJS = require('sockjs-client');\n\t\tSockJS = new SockJS(GIGETY_MESSENGER_URL + '/ws');\n\t\tSockJS.onopen = () => {\n\t\t\tconsole.log('SOCKJS is CONNECTED AND OPEN FOR MESSAGING');\n\t\t};\n\t\tSockJS.onmessage = (message) => {\n\t\t\tconsole.log('SOCKJS RECIEVED A MESSAGE :: ', message);\n\t\t};\n\t\tSockJS.onclose = () => {\n\t\t\tstompClient.unsubscribe(subId);\n\t\t};\n\t\tconst stompClient = stomp.over(SockJS);\n\t\tstompClient.debug = (f) => f;\n\t\tconst onError = (error) => {\n\t\t\tconsole.log('ERRRRRRRRRRRRRRR : ', error);\n\t\t};\n\n\t\tconst onConnected = () => {\n\t\t\tconst onMessageRecieved = (msg) => {\n\t\t\t\tconst notification = JSON.parse(msg.body);\n\t\t\t\tif (activeContact.contactId === notification.senderId) {\n\t\t\t\t\tdispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n\t\t\t\t}\n\t\t\t};\n\t\t\tconst { id } = stompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved);\n\t\t\tsubId = id;\n\t\t};\n\t\tstompClient.connect({}, onConnected, onError);\n\t}, [giguser, dispatch, activeContact]);\n\treturn (\n\t\t<>\n\t\t\t<ScrollToBottom className=\"messages\">\n\t\t\t\t<List>\n\t\t\t\t\t{messages\n\t\t\t\t\t\t? messages.map((msg) => (\n\t\t\t\t\t\t\t\t<List.Item>\n\t\t\t\t\t\t\t\t\t<ContactAvatar size=\"med\" contact={activeContact} />\n\t\t\t\t\t\t\t\t\t<List.Content>\n\t\t\t\t\t\t\t\t\t\t<List.Description>{msg.content}</List.Description>\n\t\t\t\t\t\t\t\t\t</List.Content>\n\t\t\t\t\t\t\t\t</List.Item>\n\t\t\t\t\t\t  ))\n\t\t\t\t\t\t: ''}\n\t\t\t\t</List>\n\t\t\t</ScrollToBottom>\n\t\t\t<MessageInput activeContact={activeContact} giguser={giguser}></MessageInput>\n\t\t</>\n\t);\n};\n\nChatMessenger.propTypes = {\n\tactiveContact: {\n\t\tcontactId: PropTypes.string,\n\t},\n};\nChatMessenger.defaultProps = {\n\tactiveContact: { contactId: '0' },\n};\nexport default ChatMessenger;\n"]},"metadata":{},"sourceType":"module"}