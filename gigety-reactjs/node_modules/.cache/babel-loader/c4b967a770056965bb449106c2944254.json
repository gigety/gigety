{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Auth/AuthProvider.js\";\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport jwt_decode from 'jwt-decode';\nimport { SET_CURRENT_USR } from 'redux/actions/types';\nimport { setJwtTokenHeader, getUrlParameter } from 'utils/jwtUtil';\nimport { logout, loginAction } from 'redux/actions/auth';\nimport { store } from 'redux/store';\nconst jwtToken = localStorage.getItem('jwtToken');\nconsole.log(`jwt-token ${jwtToken}`);\n\nif (jwtToken) {\n  try {\n    setJwtTokenHeader(jwtToken);\n    const decodedToken = jwt_decode(jwtToken);\n    store.dispatch({\n      type: SET_CURRENT_USR,\n      payload: decodedToken\n    });\n    const now = Date.now() / 1000;\n\n    if (decodedToken.exp < now) {\n      store.dispatch(logout());\n      window.location.href = '/';\n    }\n  } catch (error) {\n    console.error('ERROR decode / setting  JWT to local storage :: ');\n    console.error(error);\n  }\n} else {\n  const uri = window.location.search;\n  const token = getUrlParameter('gigatoke', uri);\n\n  if (token) {\n    store.dispatch(loginAction(token));\n    window.location.href = '/';\n  }\n\n  const error = getUrlParameter('error', uri);\n\n  if (error) {\n    console.error(error);\n  }\n}\n\nexport default (({\n  children\n}) => /*#__PURE__*/_jsxDEV(Provider, {\n  store: store,\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 43,\n  columnNumber: 34\n}, this));","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Auth/AuthProvider.js"],"names":["React","Provider","jwt_decode","SET_CURRENT_USR","setJwtTokenHeader","getUrlParameter","logout","loginAction","store","jwtToken","localStorage","getItem","console","log","decodedToken","dispatch","type","payload","now","Date","exp","window","location","href","error","uri","search","token","children"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,iBAAT,EAA4BC,eAA5B,QAAmD,eAAnD;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,oBAApC;AACA,SAASC,KAAT,QAAsB,aAAtB;AAEA,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAjB;AACAC,OAAO,CAACC,GAAR,CAAa,aAAYJ,QAAS,EAAlC;;AACA,IAAIA,QAAJ,EAAc;AACb,MAAI;AACHL,IAAAA,iBAAiB,CAACK,QAAD,CAAjB;AACA,UAAMK,YAAY,GAAGZ,UAAU,CAACO,QAAD,CAA/B;AACAD,IAAAA,KAAK,CAACO,QAAN,CAAe;AACdC,MAAAA,IAAI,EAAEb,eADQ;AAEdc,MAAAA,OAAO,EAAEH;AAFK,KAAf;AAIA,UAAMI,GAAG,GAAGC,IAAI,CAACD,GAAL,KAAa,IAAzB;;AACA,QAAIJ,YAAY,CAACM,GAAb,GAAmBF,GAAvB,EAA4B;AAC3BV,MAAAA,KAAK,CAACO,QAAN,CAAeT,MAAM,EAArB;AACAe,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACA;AACD,GAZD,CAYE,OAAOC,KAAP,EAAc;AACfZ,IAAAA,OAAO,CAACY,KAAR,CAAc,kDAAd;AACAZ,IAAAA,OAAO,CAACY,KAAR,CAAcA,KAAd;AACA;AACD,CAjBD,MAiBO;AACN,QAAMC,GAAG,GAAGJ,MAAM,CAACC,QAAP,CAAgBI,MAA5B;AAEA,QAAMC,KAAK,GAAGtB,eAAe,CAAC,UAAD,EAAaoB,GAAb,CAA7B;;AAEA,MAAIE,KAAJ,EAAW;AACVnB,IAAAA,KAAK,CAACO,QAAN,CAAeR,WAAW,CAACoB,KAAD,CAA1B;AACAN,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACA;;AACD,QAAMC,KAAK,GAAGnB,eAAe,CAAC,OAAD,EAAUoB,GAAV,CAA7B;;AACA,MAAID,KAAJ,EAAW;AACVZ,IAAAA,OAAO,CAACY,KAAR,CAAcA,KAAd;AACA;AACD;;AAED,gBAAe,CAAC;AAAEI,EAAAA;AAAF,CAAD,kBAAkB,QAAC,QAAD;AAAU,EAAA,KAAK,EAAEpB,KAAjB;AAAA,YAAyBoB;AAAzB;AAAA;AAAA;AAAA;AAAA,QAAjC","sourcesContent":["import React from 'react';\nimport { Provider } from 'react-redux';\nimport jwt_decode from 'jwt-decode';\nimport { SET_CURRENT_USR } from 'redux/actions/types';\nimport { setJwtTokenHeader, getUrlParameter } from 'utils/jwtUtil';\nimport { logout, loginAction } from 'redux/actions/auth';\nimport { store } from 'redux/store';\n\nconst jwtToken = localStorage.getItem('jwtToken');\nconsole.log(`jwt-token ${jwtToken}`);\nif (jwtToken) {\n\ttry {\n\t\tsetJwtTokenHeader(jwtToken);\n\t\tconst decodedToken = jwt_decode(jwtToken);\n\t\tstore.dispatch({\n\t\t\ttype: SET_CURRENT_USR,\n\t\t\tpayload: decodedToken,\n\t\t});\n\t\tconst now = Date.now() / 1000;\n\t\tif (decodedToken.exp < now) {\n\t\t\tstore.dispatch(logout());\n\t\t\twindow.location.href = '/';\n\t\t}\n\t} catch (error) {\n\t\tconsole.error('ERROR decode / setting  JWT to local storage :: ');\n\t\tconsole.error(error);\n\t}\n} else {\n\tconst uri = window.location.search;\n\n\tconst token = getUrlParameter('gigatoke', uri);\n\n\tif (token) {\n\t\tstore.dispatch(loginAction(token));\n\t\twindow.location.href = '/';\n\t}\n\tconst error = getUrlParameter('error', uri);\n\tif (error) {\n\t\tconsole.error(error);\n\t}\n}\n\nexport default ({ children }) => <Provider store={store}>{children}</Provider>;\n"]},"metadata":{},"sourceType":"module"}