{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { StompClientContext } from 'contexts/StompClientContext';\nimport { useCallback } from 'react';\nimport { useContext, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { findMessagesFor121Chat, findNewUserMessages, findUserMessageNotifications, updateChatMessages } from '../actions/messagesAction';\nexport const use121ChatMessages = (senderId, recipientId) => {\n  _s();\n\n  const content = useSelector(state => state.messages);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(findMessagesFor121Chat(senderId, recipientId));\n  }, [dispatch, senderId, recipientId]);\n  return content.messages;\n};\n\n_s(use121ChatMessages, \"C7Gsg2cuNtyu1IT4jiHEh9hf2uY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\nexport const useAllUserMessageNotifications = userId => {\n  _s2();\n\n  const content = useSelector(state => state.messages);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(findUserMessageNotifications(userId));\n  }, [dispatch, userId]);\n  return content.messageNotifications;\n};\n\n_s2(useAllUserMessageNotifications, \"C7Gsg2cuNtyu1IT4jiHEh9hf2uY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\nexport const useAllNewUserMessages = userId => {\n  _s3();\n\n  const content = useSelector(state => state.messages);\n  console.log(content);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(findNewUserMessages(userId));\n  }, [dispatch, userId]);\n  return content.newMessages;\n};\n\n_s3(useAllNewUserMessages, \"C7Gsg2cuNtyu1IT4jiHEh9hf2uY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\nexport const useMessenger = (giguser, contact, sendChatMessage, stompClient) => {\n  _s4();\n\n  const dispatch = useDispatch(); //const { getStompClient } = useContext(StompClientContext);\n\n  const onMessageRecieved = useCallback(msg => {\n    console.log('RECIIIIIIIIEEEEWEEEVED');\n    const notification = JSON.parse(msg.body);\n\n    if (contact.contactId === notification.senderId) {\n      console.log('WE FOUND A MATCH');\n      dispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n    }\n  }, [contact.contactId, giguser.id, dispatch]);\n  useEffect(() => {\n    //const stompClient = getStompClient();\n    sendChatMessage.current = message => {\n      console.log('SENDINGGGGGGGGGGGGGGGGGGGGGGGGGG');\n      stompClient.publish({\n        destination: '/msg/chat',\n        body: JSON.stringify(message)\n      });\n      dispatch(updateChatMessages(message));\n    };\n\n    console.log('Subscribing ... ', stompClient);\n    const {\n      id\n    } = stompClient.subscribe(`/user/${giguser.id}/queue}/messages`, onMessageRecieved);\n    console.log(id + stompClient.connected);\n    return () => {\n      console.log('Might Unsubscribe');\n\n      if (stompClient.connected) {\n        console.log('UNSUBSCRIBING ...');\n        stompClient.unsubscribe(id);\n      }\n    };\n  }, [giguser, contact.contactId, getStompClient, dispatch, sendChatMessage, onMessageRecieved]);\n};\n\n_s4(useMessenger, \"K6PwqRmml2Q+YaID8m9D3dyh4l4=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/redux/hooks/useMessages.js"],"names":["StompClientContext","useCallback","useContext","useEffect","useDispatch","useSelector","findMessagesFor121Chat","findNewUserMessages","findUserMessageNotifications","updateChatMessages","use121ChatMessages","senderId","recipientId","content","state","messages","dispatch","useAllUserMessageNotifications","userId","messageNotifications","useAllNewUserMessages","console","log","newMessages","useMessenger","giguser","contact","sendChatMessage","stompClient","onMessageRecieved","msg","notification","JSON","parse","body","contactId","id","current","message","publish","destination","stringify","subscribe","connected","unsubscribe","getStompClient"],"mappings":"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","sourcesContent":["import { StompClientContext } from 'contexts/StompClientContext';\nimport { useCallback } from 'react';\nimport { useContext, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n\tfindMessagesFor121Chat,\n\tfindNewUserMessages,\n\tfindUserMessageNotifications,\n\tupdateChatMessages,\n} from '../actions/messagesAction';\n\nexport const use121ChatMessages = (senderId, recipientId) => {\n\tconst content = useSelector((state) => state.messages);\n\tconst dispatch = useDispatch();\n\tuseEffect(() => {\n\t\tdispatch(findMessagesFor121Chat(senderId, recipientId));\n\t}, [dispatch, senderId, recipientId]);\n\treturn content.messages;\n};\n\nexport const useAllUserMessageNotifications = (userId) => {\n\tconst content = useSelector((state) => state.messages);\n\tconst dispatch = useDispatch();\n\tuseEffect(() => {\n\t\tdispatch(findUserMessageNotifications(userId));\n\t}, [dispatch, userId]);\n\treturn content.messageNotifications;\n};\n\nexport const useAllNewUserMessages = (userId) => {\n\tconst content = useSelector((state) => state.messages);\n\tconsole.log(content);\n\tconst dispatch = useDispatch();\n\tuseEffect(() => {\n\t\tdispatch(findNewUserMessages(userId));\n\t}, [dispatch, userId]);\n\treturn content.newMessages;\n};\nexport const useMessenger = (giguser, contact, sendChatMessage, stompClient) => {\n\tconst dispatch = useDispatch();\n\t//const { getStompClient } = useContext(StompClientContext);\n\tconst onMessageRecieved = useCallback(\n\t\t(msg) => {\n\t\t\tconsole.log('RECIIIIIIIIEEEEWEEEVED');\n\t\t\tconst notification = JSON.parse(msg.body);\n\t\t\tif (contact.contactId === notification.senderId) {\n\t\t\t\tconsole.log('WE FOUND A MATCH');\n\t\t\t\tdispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n\t\t\t}\n\t\t},\n\t\t[contact.contactId, giguser.id, dispatch]\n\t);\n\tuseEffect(() => {\n\t\t//const stompClient = getStompClient();\n\t\tsendChatMessage.current = (message) => {\n\t\t\tconsole.log('SENDINGGGGGGGGGGGGGGGGGGGGGGGGGG');\n\t\t\tstompClient.publish({ destination: '/msg/chat', body: JSON.stringify(message) });\n\t\t\tdispatch(updateChatMessages(message));\n\t\t};\n\n\t\tconsole.log('Subscribing ... ', stompClient);\n\t\tconst { id } = stompClient.subscribe(`/user/${giguser.id}/queue}/messages`, onMessageRecieved);\n\t\tconsole.log(id + stompClient.connected);\n\t\treturn () => {\n\t\t\tconsole.log('Might Unsubscribe');\n\t\t\tif (stompClient.connected) {\n\t\t\t\tconsole.log('UNSUBSCRIBING ...');\n\t\t\t\tstompClient.unsubscribe(id);\n\t\t\t}\n\t\t};\n\t}, [giguser, contact.contactId, getStompClient, dispatch, sendChatMessage, onMessageRecieved]);\n};\n"]},"metadata":{},"sourceType":"module"}