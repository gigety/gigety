{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatMessenger/ChatMessenger.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { use121ChatMessages, useMessenger } from 'redux/hooks/useMessages';\nimport { List } from 'semantic-ui-react';\nimport ContactAvatar from '../ContactAvatar/ContactAvatar';\nimport MessageInput from '../MessageInput/MessageInput';\nimport { findMessagesFor121Chat } from 'redux/actions/messagesAction';\nimport { StompClientContext } from 'contexts/StompClientContext';\nimport { GIGETY_MESSENGER_URL } from '../../../constants';\n\nconst ChatMessenger = ({\n  activeContact\n}) => {\n  _s();\n\n  const {\n    giguser\n  } = useSelector(state => state.giguser);\n  activeContact = activeContact ? activeContact : {};\n  const messages = use121ChatMessages(giguser.id, activeContact.contactId); //useMessenger(giguser, activeContact);\n\n  const {\n    stompClient\n  } = useContext(StompClientContext);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const stomp = require('stompjs');\n\n    let SockJS = require('sockjs-client');\n\n    SockJS = new SockJS(GIGETY_MESSENGER_URL + '/ws');\n    const stompClient = stomp.over(SockJS);\n\n    const onError = error => {\n      console.log('ERRRRRRRRRRRRRRR : ', error);\n    };\n\n    const onConnected = () => {\n      const onMessageRecieved = msg => {\n        console.log('RECEIVED MESSAGE +++++++++++++++++++', activeContact);\n        const notification = JSON.parse(msg.body);\n\n        if (activeContact.contactId === notification.senderId) {\n          console.log('WE FOUND A MATCH');\n          dispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n        }\n      };\n\n      const {\n        id\n      } = stompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved);\n      return () => {\n        console.log(`here we unsubscibe to id ${id}, you best check this is proper way to unsubscribe`);\n        stompClient.unsubscribe(id);\n      };\n    };\n\n    stompClient.connect({}, onConnected, onError);\n  }, [giguser, activeContact, stompClient, dispatch]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ScrollToBottom, {\n      className: \"messages\",\n      children: /*#__PURE__*/_jsxDEV(List, {\n        children: messages ? messages.map(msg => /*#__PURE__*/_jsxDEV(List.Item, {\n          children: [/*#__PURE__*/_jsxDEV(ContactAvatar, {\n            size: \"med\",\n            contact: activeContact\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(List.Content, {\n            children: /*#__PURE__*/_jsxDEV(List.Description, {\n              children: msg.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 10\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }, this)) : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      activeContact: activeContact,\n      giguser: giguser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChatMessenger, \"8nT8jO1e1Y9DjIJgkiLldGwVv+Q=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ChatMessenger;\nChatMessenger.propTypes = {\n  activeContact: {\n    contactId: PropTypes.string\n  }\n};\nChatMessenger.defaultProps = {\n  activeContact: {\n    contactId: '0'\n  }\n};\nexport default ChatMessenger;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatMessenger\");","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatMessenger/ChatMessenger.js"],"names":["React","useContext","useEffect","useState","PropTypes","useDispatch","useSelector","ScrollToBottom","use121ChatMessages","useMessenger","List","ContactAvatar","MessageInput","findMessagesFor121Chat","StompClientContext","GIGETY_MESSENGER_URL","ChatMessenger","activeContact","giguser","state","messages","id","contactId","stompClient","dispatch","stomp","require","SockJS","over","onError","error","console","log","onConnected","onMessageRecieved","msg","notification","JSON","parse","body","senderId","subscribe","unsubscribe","connect","map","content","propTypes","string","defaultProps"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { use121ChatMessages, useMessenger } from 'redux/hooks/useMessages';\nimport { List } from 'semantic-ui-react';\nimport ContactAvatar from '../ContactAvatar/ContactAvatar';\nimport MessageInput from '../MessageInput/MessageInput';\nimport { findMessagesFor121Chat } from 'redux/actions/messagesAction';\nimport { StompClientContext } from 'contexts/StompClientContext';\nimport { GIGETY_MESSENGER_URL } from '../../../constants';\nconst ChatMessenger = ({ activeContact }) => {\n\tconst { giguser } = useSelector((state) => state.giguser);\n\tactiveContact = activeContact ? activeContact : {};\n\tconst messages = use121ChatMessages(giguser.id, activeContact.contactId);\n\t//useMessenger(giguser, activeContact);\n\tconst { stompClient } = useContext(StompClientContext);\n\tconst dispatch = useDispatch();\n\tuseEffect(() => {\n\t\tconst stomp = require('stompjs');\n\t\tlet SockJS = require('sockjs-client');\n\t\tSockJS = new SockJS(GIGETY_MESSENGER_URL + '/ws');\n\t\tconst stompClient = stomp.over(SockJS);\n\t\tconst onError = (error) => {\n\t\t\tconsole.log('ERRRRRRRRRRRRRRR : ', error);\n\t\t};\n\t\tconst onConnected = () => {\n\t\t\tconst onMessageRecieved = (msg) => {\n\t\t\t\tconsole.log('RECEIVED MESSAGE +++++++++++++++++++', activeContact);\n\t\t\t\tconst notification = JSON.parse(msg.body);\n\t\t\t\tif (activeContact.contactId === notification.senderId) {\n\t\t\t\t\tconsole.log('WE FOUND A MATCH');\n\t\t\t\t\tdispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n\t\t\t\t}\n\t\t\t};\n\t\t\tconst { id } = stompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved);\n\n\t\t\treturn () => {\n\t\t\t\tconsole.log(`here we unsubscibe to id ${id}, you best check this is proper way to unsubscribe`);\n\t\t\t\tstompClient.unsubscribe(id);\n\t\t\t};\n\t\t};\n\t\tstompClient.connect({}, onConnected, onError);\n\t}, [giguser, activeContact, stompClient, dispatch]);\n\treturn (\n\t\t<>\n\t\t\t<ScrollToBottom className=\"messages\">\n\t\t\t\t<List>\n\t\t\t\t\t{messages\n\t\t\t\t\t\t? messages.map((msg) => (\n\t\t\t\t\t\t\t\t<List.Item>\n\t\t\t\t\t\t\t\t\t<ContactAvatar size=\"med\" contact={activeContact} />\n\t\t\t\t\t\t\t\t\t<List.Content>\n\t\t\t\t\t\t\t\t\t\t<List.Description>{msg.content}</List.Description>\n\t\t\t\t\t\t\t\t\t</List.Content>\n\t\t\t\t\t\t\t\t</List.Item>\n\t\t\t\t\t\t  ))\n\t\t\t\t\t\t: ''}\n\t\t\t\t</List>\n\t\t\t</ScrollToBottom>\n\t\t\t<MessageInput activeContact={activeContact} giguser={giguser}></MessageInput>\n\t\t</>\n\t);\n};\n\nChatMessenger.propTypes = {\n\tactiveContact: {\n\t\tcontactId: PropTypes.string,\n\t},\n};\nChatMessenger.defaultProps = {\n\tactiveContact: { contactId: '0' },\n};\nexport default ChatMessenger;\n"]},"metadata":{},"sourceType":"module"}