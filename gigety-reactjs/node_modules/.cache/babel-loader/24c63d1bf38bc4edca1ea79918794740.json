{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatMessenger/ChatMessenger.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useMemo, useRef } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { use121ChatMessages } from 'redux/hooks/useMessages';\nimport { List } from 'semantic-ui-react';\nimport ContactAvatar from '../ContactAvatar/ContactAvatar';\nimport MessageInput from '../MessageInput/MessageInput';\nimport { findMessagesFor121Chat, updateChatMessages } from 'redux/actions/messagesAction';\nimport { StompRXClientContext } from 'contexts/StompRXClientContext';\nimport { map } from 'rxjs/Operator';\nimport UserAvatar from '../UserAvatar/UserAvatar';\n\nconst ChatMessenger = ({\n  activeContact\n}) => {\n  _s();\n\n  const {\n    giguser\n  } = useSelector(state => state.giguser);\n  const messages = use121ChatMessages(giguser.id, activeContact.contactId);\n  console.log(messages);\n  const {\n    getStompClient\n  } = useContext(StompRXClientContext);\n  const sendChatMessage = useRef(null);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const stompClient = getStompClient();\n\n    sendChatMessage.current = message => {\n      stompClient.publish({\n        destination: '/msg/chat',\n        body: JSON.stringify(message)\n      });\n      dispatch(updateChatMessages(message));\n    };\n\n    const onMessageRecieved = msg => {\n      console.log(msg); //TODO: get the contact and user from getState() and make this a custom hook or context\n\n      const notification = JSON.parse(msg.body);\n\n      if (activeContact.contactId === notification.senderId) {\n        dispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n      }\n    };\n\n    console.log('Gigety SubScribing .......');\n    const rxSubsciption = stompClient.watch(`/user/${giguser.id}/queue/messages`).subscribe(payload => onMessageRecieved(payload));\n    return () => {\n      if (stompClient) {\n        console.log('UNSUBSCRIBING ...');\n        rxSubsciption.unsubscribe();\n      }\n    };\n  }, [giguser, dispatch, activeContact.contactId, getStompClient]);\n  const userAvatar = useMemo(() => /*#__PURE__*/_jsxDEV(UserAvatar, {\n    size: \"mini\",\n    user: giguser\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 35\n  }, this), [giguser]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ScrollToBottom, {\n      className: \"messages\",\n      children: /*#__PURE__*/_jsxDEV(List, {\n        children: messages ? messages.map(msg => {\n          const avatar = msg.senderId.toString() === giguser.id.toString() ? /*#__PURE__*/_jsxDEV(UserAvatar, {\n            size: \"mini\",\n            user: giguser\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 11\n          }, this) : /*#__PURE__*/_jsxDEV(ContactAvatar, {\n            size: \"mini\",\n            contact: activeContact\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 11\n          }, this);\n          return /*#__PURE__*/_jsxDEV(List.Item, {\n            children: [avatar, /*#__PURE__*/_jsxDEV(List.Content, {\n              children: /*#__PURE__*/_jsxDEV(List.Description, {\n                children: msg.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 12\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 11\n            }, this)]\n          }, msg.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 10\n          }, this);\n        }) : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      activeContact: activeContact,\n      giguser: giguser,\n      sendChatMessage: sendChatMessage.current\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChatMessenger, \"4YbekF5/beE/o+Q2WqZ/tZ3RRHI=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ChatMessenger;\nChatMessenger.propTypes = {\n  activeContact: PropTypes.shape({\n    contactId: PropTypes.string,\n    contactName: PropTypes.string,\n    contactImageUrl: PropTypes.string\n  })\n};\nChatMessenger.defaultProps = {\n  activeContact: {\n    contactId: '0'\n  }\n};\nexport default ChatMessenger;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatMessenger\");","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatMessenger/ChatMessenger.js"],"names":["React","useContext","useEffect","useMemo","useRef","PropTypes","useDispatch","useSelector","ScrollToBottom","use121ChatMessages","List","ContactAvatar","MessageInput","findMessagesFor121Chat","updateChatMessages","StompRXClientContext","map","UserAvatar","ChatMessenger","activeContact","giguser","state","messages","id","contactId","console","log","getStompClient","sendChatMessage","dispatch","stompClient","current","message","publish","destination","body","JSON","stringify","onMessageRecieved","msg","notification","parse","senderId","rxSubsciption","watch","subscribe","payload","unsubscribe","userAvatar","avatar","toString","content","propTypes","shape","string","contactName","contactImageUrl","defaultProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,OAAvC,EAAgDC,MAAhD,QAA8D,OAA9D;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,SAASC,kBAAT,QAAmC,yBAAnC;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,SAASC,sBAAT,EAAiCC,kBAAjC,QAA2D,8BAA3D;AACA,SAASC,oBAAT,QAAqC,+BAArC;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AACA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuB;AAAA;;AAC5C,QAAM;AAAEC,IAAAA;AAAF,MAAcb,WAAW,CAAEc,KAAD,IAAWA,KAAK,CAACD,OAAlB,CAA/B;AAEA,QAAME,QAAQ,GAAGb,kBAAkB,CAACW,OAAO,CAACG,EAAT,EAAaJ,aAAa,CAACK,SAA3B,CAAnC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAqB1B,UAAU,CAACc,oBAAD,CAArC;AACA,QAAMa,eAAe,GAAGxB,MAAM,CAAC,IAAD,CAA9B;AACA,QAAMyB,QAAQ,GAAGvB,WAAW,EAA5B;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACf,UAAM4B,WAAW,GAAGH,cAAc,EAAlC;;AACAC,IAAAA,eAAe,CAACG,OAAhB,GAA2BC,OAAD,IAAa;AACtCF,MAAAA,WAAW,CAACG,OAAZ,CAAoB;AAAEC,QAAAA,WAAW,EAAE,WAAf;AAA4BC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,OAAf;AAAlC,OAApB;AACAH,MAAAA,QAAQ,CAACf,kBAAkB,CAACkB,OAAD,CAAnB,CAAR;AACA,KAHD;;AAKA,UAAMM,iBAAiB,GAAIC,GAAD,IAAS;AAClCd,MAAAA,OAAO,CAACC,GAAR,CAAYa,GAAZ,EADkC,CAElC;;AACA,YAAMC,YAAY,GAAGJ,IAAI,CAACK,KAAL,CAAWF,GAAG,CAACJ,IAAf,CAArB;;AACA,UAAIhB,aAAa,CAACK,SAAd,KAA4BgB,YAAY,CAACE,QAA7C,EAAuD;AACtDb,QAAAA,QAAQ,CAAChB,sBAAsB,CAACO,OAAO,CAACG,EAAT,EAAaiB,YAAY,CAACE,QAA1B,CAAvB,CAAR;AACA;AACD,KAPD;;AAQAjB,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,UAAMiB,aAAa,GAAGb,WAAW,CAC/Bc,KADoB,CACb,SAAQxB,OAAO,CAACG,EAAG,iBADN,EAEpBsB,SAFoB,CAETC,OAAD,IAAaR,iBAAiB,CAACQ,OAAD,CAFpB,CAAtB;AAGA,WAAO,MAAM;AACZ,UAAIhB,WAAJ,EAAiB;AAChBL,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAiB,QAAAA,aAAa,CAACI,WAAd;AACA;AACD,KALD;AAMA,GAzBQ,EAyBN,CAAC3B,OAAD,EAAUS,QAAV,EAAoBV,aAAa,CAACK,SAAlC,EAA6CG,cAA7C,CAzBM,CAAT;AA0BA,QAAMqB,UAAU,GAAG7C,OAAO,CAAC,mBAAM,QAAC,UAAD;AAAY,IAAA,IAAI,EAAC,MAAjB;AAAwB,IAAA,IAAI,EAAEiB;AAA9B;AAAA;AAAA;AAAA;AAAA,UAAP,EAAkD,CAACA,OAAD,CAAlD,CAA1B;AACA,sBACC;AAAA,4BACC,QAAC,cAAD;AAAgB,MAAA,SAAS,EAAC,UAA1B;AAAA,6BACC,QAAC,IAAD;AAAA,kBACEE,QAAQ,GACNA,QAAQ,CAACN,GAAT,CAAcuB,GAAD,IAAS;AACtB,gBAAMU,MAAM,GACXV,GAAG,CAACG,QAAJ,CAAaQ,QAAb,OAA4B9B,OAAO,CAACG,EAAR,CAAW2B,QAAX,EAA5B,gBACC,QAAC,UAAD;AAAY,YAAA,IAAI,EAAC,MAAjB;AAAwB,YAAA,IAAI,EAAE9B;AAA9B;AAAA;AAAA;AAAA;AAAA,kBADD,gBAGC,QAAC,aAAD;AAAe,YAAA,IAAI,EAAC,MAApB;AAA2B,YAAA,OAAO,EAAED;AAApC;AAAA;AAAA;AAAA;AAAA,kBAJF;AAMA,8BACC,QAAC,IAAD,CAAM,IAAN;AAAA,uBACE8B,MADF,eAEC,QAAC,IAAD,CAAM,OAAN;AAAA,qCACC,QAAC,IAAD,CAAM,WAAN;AAAA,0BAAmBV,GAAG,CAACY;AAAvB;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,oBAFD;AAAA,aAAgBZ,GAAG,CAAChB,EAApB;AAAA;AAAA;AAAA;AAAA,kBADD;AAQC,SAfD,CADM,GAiBN;AAlBJ;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD,eAuBC,QAAC,YAAD;AACC,MAAA,aAAa,EAAEJ,aADhB;AAEC,MAAA,OAAO,EAAEC,OAFV;AAGC,MAAA,eAAe,EAAEQ,eAAe,CAACG;AAHlC;AAAA;AAAA;AAAA;AAAA,YAvBD;AAAA,kBADD;AA+BA,CAlED;;GAAMb,a;UACeX,W,EAMHD,W;;;KAPZY,a;AAoENA,aAAa,CAACkC,SAAd,GAA0B;AACzBjC,EAAAA,aAAa,EAAEd,SAAS,CAACgD,KAAV,CAAgB;AAC9B7B,IAAAA,SAAS,EAAEnB,SAAS,CAACiD,MADS;AAE9BC,IAAAA,WAAW,EAAElD,SAAS,CAACiD,MAFO;AAG9BE,IAAAA,eAAe,EAAEnD,SAAS,CAACiD;AAHG,GAAhB;AADU,CAA1B;AAOApC,aAAa,CAACuC,YAAd,GAA6B;AAC5BtC,EAAAA,aAAa,EAAE;AAAEK,IAAAA,SAAS,EAAE;AAAb;AADa,CAA7B;AAGA,eAAeN,aAAf","sourcesContent":["import React, { useContext, useEffect, useMemo, useRef } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { use121ChatMessages } from 'redux/hooks/useMessages';\nimport { List } from 'semantic-ui-react';\nimport ContactAvatar from '../ContactAvatar/ContactAvatar';\nimport MessageInput from '../MessageInput/MessageInput';\nimport { findMessagesFor121Chat, updateChatMessages } from 'redux/actions/messagesAction';\nimport { StompRXClientContext } from 'contexts/StompRXClientContext';\nimport { map } from 'rxjs/Operator';\nimport UserAvatar from '../UserAvatar/UserAvatar';\nconst ChatMessenger = ({ activeContact }) => {\n\tconst { giguser } = useSelector((state) => state.giguser);\n\n\tconst messages = use121ChatMessages(giguser.id, activeContact.contactId);\n\tconsole.log(messages);\n\tconst { getStompClient } = useContext(StompRXClientContext);\n\tconst sendChatMessage = useRef(null);\n\tconst dispatch = useDispatch();\n\tuseEffect(() => {\n\t\tconst stompClient = getStompClient();\n\t\tsendChatMessage.current = (message) => {\n\t\t\tstompClient.publish({ destination: '/msg/chat', body: JSON.stringify(message) });\n\t\t\tdispatch(updateChatMessages(message));\n\t\t};\n\n\t\tconst onMessageRecieved = (msg) => {\n\t\t\tconsole.log(msg);\n\t\t\t//TODO: get the contact and user from getState() and make this a custom hook or context\n\t\t\tconst notification = JSON.parse(msg.body);\n\t\t\tif (activeContact.contactId === notification.senderId) {\n\t\t\t\tdispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n\t\t\t}\n\t\t};\n\t\tconsole.log('Gigety SubScribing .......');\n\t\tconst rxSubsciption = stompClient\n\t\t\t.watch(`/user/${giguser.id}/queue/messages`)\n\t\t\t.subscribe((payload) => onMessageRecieved(payload));\n\t\treturn () => {\n\t\t\tif (stompClient) {\n\t\t\t\tconsole.log('UNSUBSCRIBING ...');\n\t\t\t\trxSubsciption.unsubscribe();\n\t\t\t}\n\t\t};\n\t}, [giguser, dispatch, activeContact.contactId, getStompClient]);\n\tconst userAvatar = useMemo(() => <UserAvatar size=\"mini\" user={giguser} />, [giguser]);\n\treturn (\n\t\t<>\n\t\t\t<ScrollToBottom className=\"messages\">\n\t\t\t\t<List>\n\t\t\t\t\t{messages\n\t\t\t\t\t\t? messages.map((msg) => {\n\t\t\t\t\t\t\t\tconst avatar =\n\t\t\t\t\t\t\t\t\tmsg.senderId.toString() === giguser.id.toString() ? (\n\t\t\t\t\t\t\t\t\t\t<UserAvatar size=\"mini\" user={giguser} />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<ContactAvatar size=\"mini\" contact={activeContact} />\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<List.Item key={msg.id}>\n\t\t\t\t\t\t\t\t\t\t{avatar}\n\t\t\t\t\t\t\t\t\t\t<List.Content>\n\t\t\t\t\t\t\t\t\t\t\t<List.Description>{msg.content}</List.Description>\n\t\t\t\t\t\t\t\t\t\t</List.Content>\n\t\t\t\t\t\t\t\t\t</List.Item>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t  })\n\t\t\t\t\t\t: ''}\n\t\t\t\t</List>\n\t\t\t</ScrollToBottom>\n\t\t\t<MessageInput\n\t\t\t\tactiveContact={activeContact}\n\t\t\t\tgiguser={giguser}\n\t\t\t\tsendChatMessage={sendChatMessage.current}\n\t\t\t></MessageInput>\n\t\t</>\n\t);\n};\n\nChatMessenger.propTypes = {\n\tactiveContact: PropTypes.shape({\n\t\tcontactId: PropTypes.string,\n\t\tcontactName: PropTypes.string,\n\t\tcontactImageUrl: PropTypes.string,\n\t}),\n};\nChatMessenger.defaultProps = {\n\tactiveContact: { contactId: '0' },\n};\nexport default ChatMessenger;\n"]},"metadata":{},"sourceType":"module"}