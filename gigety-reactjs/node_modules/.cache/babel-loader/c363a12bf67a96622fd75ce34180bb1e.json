{"ast":null,"code":"// import React, { createContext } from 'react';\n// import { useDispatch } from 'react-redux';\n// import { useGigUser } from 'redux/hooks/useGigUser';\n// import { GIGETY_MESSENGER_URL } from '../constants';\n// import { updateChatMessages, updateUserMessageNotifications } from '../redux/actions/messagesAction';\n// //import * as stomp from '@stomp/stompjs';\n// //import * as SockJS from 'sockjs-client';\n// const StompClientContext = createContext(null);\n// export { StompClientContext };\n// const MessageContext = ({ children }) => {\n// \tlet stompClient = null;\n// \tlet wrappedStompClient = null;\n// \tconst giguser = useGigUser();\n// \tconst onConnected = () => {\n// \t\tconsole.log('SockJS iiiiiiissssss COnnected to STOMP protocol');\n// \t\tconsole.log('may be a good place to subscribe to user specific messages so they can be notified');\n// \t\tconst onMessageRecieved = (msg) => {\n// \t\t\tconst notification = JSON.parse(msg.body);\n// \t\t\tconsole.log('ALERT NOTIFICATION ::', notification);\n// \t\t\tdispatch(updateUserMessageNotifications(notification));\n// \t\t};\n// \t\tif (giguser) {\n// \t\t\tstompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved);\n// \t\t}\n// \t};\n// \tconst onError = (error) => {\n// \t\tconsole.error('GIGETY ERROR in STompCLientContext');\n// \t\tconsole.error(error);\n// \t};\n// \t//Connect stompClient to gigety-ws-service\n// \tconst stomp = require('stompjs');\n// \tlet SockJS = require('sockjs-client');\n// \tSockJS = new SockJS(GIGETY_MESSENGER_URL + '/ws');\n// \t//SockJS = new SockJS('http://localhost:7070/messenger/ws', null, {});\n// \tstompClient = stomp.over(SockJS);\n// \tstompClient.connect({}, onConnected, onError);\n// \tstompClient.debug = (f) => f;\n// \tconst dispatch = useDispatch();\n// \tconst sendChatMessage = (message) => {\n// \t\tconsole.log(`sending Message ${message}`);\n// \t\tstompClient.send('/msg/chat', {}, JSON.stringify(message));\n// \t\tdispatch(updateChatMessages(message));\n// \t};\n// \twrappedStompClient = {\n// \t\tstomp,\n// \t\tSockJS,\n// \t\tstompClient,\n// \t\tsendChatMessage,\n// \t};\n// \tconsole.log(`CONFIGURATION:::: wrappedStompClient = ${wrappedStompClient}`);\n// \treturn <StompClientContext.Provider value={wrappedStompClient}>{children}</StompClientContext.Provider>;\n// };\n// export default MessageContext;","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/contexts/StompClientContext.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["// import React, { createContext } from 'react';\n// import { useDispatch } from 'react-redux';\n// import { useGigUser } from 'redux/hooks/useGigUser';\n// import { GIGETY_MESSENGER_URL } from '../constants';\n// import { updateChatMessages, updateUserMessageNotifications } from '../redux/actions/messagesAction';\n// //import * as stomp from '@stomp/stompjs';\n// //import * as SockJS from 'sockjs-client';\n// const StompClientContext = createContext(null);\n// export { StompClientContext };\n// const MessageContext = ({ children }) => {\n// \tlet stompClient = null;\n// \tlet wrappedStompClient = null;\n// \tconst giguser = useGigUser();\n// \tconst onConnected = () => {\n// \t\tconsole.log('SockJS iiiiiiissssss COnnected to STOMP protocol');\n// \t\tconsole.log('may be a good place to subscribe to user specific messages so they can be notified');\n// \t\tconst onMessageRecieved = (msg) => {\n// \t\t\tconst notification = JSON.parse(msg.body);\n// \t\t\tconsole.log('ALERT NOTIFICATION ::', notification);\n// \t\t\tdispatch(updateUserMessageNotifications(notification));\n// \t\t};\n// \t\tif (giguser) {\n// \t\t\tstompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved);\n// \t\t}\n// \t};\n\n// \tconst onError = (error) => {\n// \t\tconsole.error('GIGETY ERROR in STompCLientContext');\n// \t\tconsole.error(error);\n// \t};\n\n// \t//Connect stompClient to gigety-ws-service\n// \tconst stomp = require('stompjs');\n// \tlet SockJS = require('sockjs-client');\n// \tSockJS = new SockJS(GIGETY_MESSENGER_URL + '/ws');\n// \t//SockJS = new SockJS('http://localhost:7070/messenger/ws', null, {});\n// \tstompClient = stomp.over(SockJS);\n// \tstompClient.connect({}, onConnected, onError);\n\n// \tstompClient.debug = (f) => f;\n// \tconst dispatch = useDispatch();\n\n// \tconst sendChatMessage = (message) => {\n// \t\tconsole.log(`sending Message ${message}`);\n// \t\tstompClient.send('/msg/chat', {}, JSON.stringify(message));\n// \t\tdispatch(updateChatMessages(message));\n// \t};\n// \twrappedStompClient = {\n// \t\tstomp,\n// \t\tSockJS,\n// \t\tstompClient,\n// \t\tsendChatMessage,\n// \t};\n\n// \tconsole.log(`CONFIGURATION:::: wrappedStompClient = ${wrappedStompClient}`);\n// \treturn <StompClientContext.Provider value={wrappedStompClient}>{children}</StompClientContext.Provider>;\n// };\n\n// export default MessageContext;\n"]},"metadata":{},"sourceType":"module"}