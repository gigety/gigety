{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatModal/ChatModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport Popup from 'reactjs-popup';\nimport 'reactjs-popup/dist/index.css';\nimport UserLabel from '../../User/UserLabel';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { GIGETY_MESSENGER_URL } from '../../../constants';\nimport { Button, Card, Input } from 'semantic-ui-react';\nimport './ChatModal.css';\nimport { StompClientContext } from '../../../contexts/StompClientContext';\nimport { use121ChatMessages } from 'redux/hooks/useMessages';\nlet stompClient = null;\n\nconst ChatModal = ({\n  profile\n}) => {\n  _s();\n\n  console.log(profile);\n  const {\n    giguser\n  } = useSelector(state => state.giguser);\n  console.log(`giguser :: `, giguser);\n  const messages = use121ChatMessages(giguser.id, profile.id);\n  const [text, setText] = useState('');\n  const {\n    stompClient,\n    sendChatMessage\n  } = useContext(StompClientContext);\n  useEffect(() => {\n    const id = stompClient.subscribe(`/user/${profile.id}/queue/messages`, onMessageRecieved); //const id = stompClient.subscribe(`/queue/messages`, onMessageRecieved);\n\n    console.log(id);\n    return () => {\n      console.log(`here we unsubscibe to id ${id}, you best check this is proper way to unsubscribe`);\n      stompClient.unsubscribe(id);\n    };\n  }, []);\n\n  const onMessageRecieved = msg => {\n    console.log(`received ::::: msg ${msg}`, msg);\n    const notification = JSON.parse(msg.body);\n    console.log('Notification :: ', notification);\n  };\n\n  const sendTheMessage = msg => {\n    if (msg.trim() !== '') {\n      const message = {\n        senderId: giguser.id,\n        recipientId: profile.id,\n        senderName: giguser.name,\n        recipientName: profile.email,\n        content: msg,\n        timestamp: new Date()\n      };\n      console.log('sending msg: ', msg);\n      sendChatMessage(message);\n      console.log('msg sent', message);\n    }\n  };\n\n  const messageSent = () => {};\n\n  return /*#__PURE__*/_jsxDEV(Popup, {\n    trigger: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(UserLabel, {\n        userImageUrl: profile.userImageUrl,\n        email: profile.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }, this),\n    modal: true,\n    nested: true,\n    children: close => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [\"Send Direct Message to \", profile.email, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(ScrollToBottom, {\n          className: \"messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"Enter Message\",\n          action: true,\n          fluid: true,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            value: text,\n            onChange: e => setText(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              sendTheMessage(text);\n              setText('');\n            },\n            children: \"Send Message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"actions\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          className: \"button\",\n          children: \" Go to Messages \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"button\",\n          onClick: () => {\n            console.log('modal closed ');\n            close();\n          },\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ChatModal, \"KVLnV7y9EvN8+wZmG9JqrpavRT4=\", false, function () {\n  return [useSelector];\n});\n\n_c = ChatModal;\nexport default ChatModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatModal\");","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatModal/ChatModal.js"],"names":["React","useContext","useEffect","useState","useSelector","Popup","UserLabel","ScrollToBottom","GIGETY_MESSENGER_URL","Button","Card","Input","StompClientContext","use121ChatMessages","stompClient","ChatModal","profile","console","log","giguser","state","messages","id","text","setText","sendChatMessage","subscribe","onMessageRecieved","unsubscribe","msg","notification","JSON","parse","body","sendTheMessage","trim","message","senderId","recipientId","senderName","name","recipientName","email","content","timestamp","Date","messageSent","userImageUrl","close","e","target","value"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport Popup from 'reactjs-popup';\nimport 'reactjs-popup/dist/index.css';\nimport UserLabel from '../../User/UserLabel';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { GIGETY_MESSENGER_URL } from '../../../constants';\nimport { Button, Card, Input } from 'semantic-ui-react';\nimport './ChatModal.css';\nimport { StompClientContext } from '../../../contexts/StompClientContext';\nimport { use121ChatMessages } from 'redux/hooks/useMessages';\nlet stompClient = null;\nconst ChatModal = ({ profile }) => {\n\tconsole.log(profile);\n\tconst { giguser } = useSelector((state) => state.giguser);\n\tconsole.log(`giguser :: `, giguser);\n\tconst messages = use121ChatMessages(giguser.id, profile.id);\n\tconst [text, setText] = useState('');\n\tconst { stompClient, sendChatMessage } = useContext(StompClientContext);\n\tuseEffect(() => {\n\t\tconst id = stompClient.subscribe(`/user/${profile.id}/queue/messages`, onMessageRecieved);\n\t\t//const id = stompClient.subscribe(`/queue/messages`, onMessageRecieved);\n\t\tconsole.log(id);\n\t\treturn () => {\n\t\t\tconsole.log(`here we unsubscibe to id ${id}, you best check this is proper way to unsubscribe`);\n\t\t\tstompClient.unsubscribe(id);\n\t\t};\n\t}, []);\n\n\tconst onMessageRecieved = (msg) => {\n\t\tconsole.log(`received ::::: msg ${msg}`, msg);\n\t\tconst notification = JSON.parse(msg.body);\n\t\tconsole.log('Notification :: ', notification);\n\t};\n\tconst sendTheMessage = (msg) => {\n\t\tif (msg.trim() !== '') {\n\t\t\tconst message = {\n\t\t\t\tsenderId: giguser.id,\n\t\t\t\trecipientId: profile.id,\n\t\t\t\tsenderName: giguser.name,\n\t\t\t\trecipientName: profile.email,\n\t\t\t\tcontent: msg,\n\t\t\t\ttimestamp: new Date(),\n\t\t\t};\n\t\t\tconsole.log('sending msg: ', msg);\n\t\t\tsendChatMessage(message);\n\t\t\tconsole.log('msg sent', message);\n\t\t}\n\t};\n\tconst messageSent = () => {};\n\n\treturn (\n\t\t<Popup\n\t\t\ttrigger={\n\t\t\t\t<div>\n\t\t\t\t\t<UserLabel userImageUrl={profile.userImageUrl} email={profile.email} />\n\t\t\t\t</div>\n\t\t\t}\n\t\t\tmodal\n\t\t\tnested\n\t\t>\n\t\t\t{(close) => (\n\t\t\t\t<div className=\"modal\">\n\t\t\t\t\t<div className=\"header\">Send Direct Message to {profile.email} </div>\n\t\t\t\t\t<div className=\"content\">\n\t\t\t\t\t\t<ScrollToBottom className=\"messages\"></ScrollToBottom>\n\n\t\t\t\t\t\t<Input placeholder=\"Enter Message\" action fluid>\n\t\t\t\t\t\t\t<input value={text} onChange={(e) => setText(e.target.value)} />\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tsendTheMessage(text);\n\t\t\t\t\t\t\t\t\tsetText('');\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tSend Message\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Input>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"actions\">\n\t\t\t\t\t\t<Button className=\"button\"> Go to Messages </Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName=\"button\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tconsole.log('modal closed ');\n\t\t\t\t\t\t\t\tclose();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</Popup>\n\t);\n};\n\nexport default ChatModal;\n"]},"metadata":{},"sourceType":"module"}