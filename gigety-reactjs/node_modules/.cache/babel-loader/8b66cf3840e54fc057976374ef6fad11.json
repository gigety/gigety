{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Maps/Search/PlaceAutoComplete.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Search } from 'semantic-ui-react';\nimport _ from 'lodash';\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete';\nimport PropTypes from 'prop-types';\nimport '../../Styles/MapHeaderStyle.css';\nimport { useCurrentAddress } from '../../../redux/hooks/useCurrentAddress';\n\nfunction PlaceAutoComplete({\n  panTo,\n  location,\n  onSearchLocationSelected\n}) {\n  _s();\n\n  const currentAddress = useCurrentAddress();\n  useEffect(() => {\n    if (currentAddress) {\n      onSearchLocationSelected(currentAddress);\n    }\n  }, [onSearchLocationSelected, currentAddress]);\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => location.lat,\n        lng: () => location.lng\n      },\n      radius: 200\n    }\n  });\n  data.map(d => {\n    //adding required title property for search and key for list to avoid\n    //console error logs\n    //TODO: use a better suited id. using random defeats ther purpose\n    d.key = _.random(98, 99, true);\n    d.title = d.description;\n    return d;\n  });\n  return ready && data ? /*#__PURE__*/_jsxDEV(Search, {\n    className: \"input segment-ctl\",\n    onResultSelect: async (e, {\n      result\n    }) => {\n      const {\n        description\n      } = result;\n      const address = description;\n      setValue(address, false);\n      clearSuggestions();\n\n      try {\n        const results = await getGeocode({\n          address\n        });\n        const {\n          lat,\n          lng\n        } = await getLatLng(results[0]);\n        panTo({\n          lat,\n          lng\n        });\n        onSearchLocationSelected(results[0]);\n      } catch (error) {\n        console.error('error searching places for autocomplete: ', error);\n      }\n    },\n    onSearchChange: e => {\n      setValue(e.target.value);\n    },\n    results: data ? data : {},\n    value: value,\n    placeholder: currentAddress ? currentAddress.formatted_address : 'Search a location ...'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 3\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 3\n  }, this);\n}\n\n_s(PlaceAutoComplete, \"IU3SQMCibwFxAZP6E3X1wDejqKo=\", false, function () {\n  return [useCurrentAddress, usePlacesAutocomplete];\n});\n\n_c = PlaceAutoComplete;\nPlaceAutoComplete.propTypes = {\n  location: PropTypes.shape({\n    lat: PropTypes.number.isRequired,\n    lng: PropTypes.number.isRequired\n  }),\n  panTo: PropTypes.func\n};\nPlaceAutoComplete.defaultProps = {\n  location: {\n    lat: 47.60621,\n    lng: -122.33207\n  }\n};\nexport default PlaceAutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaceAutoComplete\");","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Maps/Search/PlaceAutoComplete.js"],"names":["React","useEffect","Search","_","usePlacesAutocomplete","getGeocode","getLatLng","PropTypes","useCurrentAddress","PlaceAutoComplete","panTo","location","onSearchLocationSelected","currentAddress","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","lat","lng","radius","map","d","key","random","title","description","e","result","address","results","error","console","target","formatted_address","propTypes","shape","number","isRequired","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { Search } from 'semantic-ui-react';\nimport _ from 'lodash';\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete';\nimport PropTypes from 'prop-types';\nimport '../../Styles/MapHeaderStyle.css';\nimport { useCurrentAddress } from '../../../redux/hooks/useCurrentAddress';\n\nfunction PlaceAutoComplete({ panTo, location, onSearchLocationSelected }) {\n\tconst currentAddress = useCurrentAddress();\n\tuseEffect(() => {\n\t\tif (currentAddress) {\n\t\t\tonSearchLocationSelected(currentAddress);\n\t\t}\n\t}, [onSearchLocationSelected, currentAddress]);\n\tconst {\n\t\tready,\n\t\tvalue,\n\t\tsuggestions: { status, data },\n\t\tsetValue,\n\t\tclearSuggestions,\n\t} = usePlacesAutocomplete({\n\t\trequestOptions: {\n\t\t\tlocation: { lat: () => location.lat, lng: () => location.lng },\n\t\t\tradius: 200,\n\t\t},\n\t});\n\tdata.map((d) => {\n\t\t//adding required title property for search and key for list to avoid\n\t\t//console error logs\n\t\t//TODO: use a better suited id. using random defeats ther purpose\n\t\td.key = _.random(98, 99, true);\n\t\td.title = d.description;\n\t\treturn d;\n\t});\n\treturn ready && data ? (\n\t\t<Search\n\t\t\tclassName=\"input segment-ctl\"\n\t\t\tonResultSelect={async (e, { result }) => {\n\t\t\t\tconst { description } = result;\n\t\t\t\tconst address = description;\n\t\t\t\tsetValue(address, false);\n\t\t\t\tclearSuggestions();\n\t\t\t\ttry {\n\t\t\t\t\tconst results = await getGeocode({ address });\n\t\t\t\t\tconst { lat, lng } = await getLatLng(results[0]);\n\t\t\t\t\tpanTo({ lat, lng });\n\t\t\t\t\tonSearchLocationSelected(results[0]);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('error searching places for autocomplete: ', error);\n\t\t\t\t}\n\t\t\t}}\n\t\t\tonSearchChange={(e) => {\n\t\t\t\tsetValue(e.target.value);\n\t\t\t}}\n\t\t\tresults={data ? data : {}}\n\t\t\tvalue={value}\n\t\t\tplaceholder={currentAddress ? currentAddress.formatted_address : 'Search a location ...'}\n\t\t/>\n\t) : (\n\t\t<div></div>\n\t);\n}\nPlaceAutoComplete.propTypes = {\n\tlocation: PropTypes.shape({\n\t\tlat: PropTypes.number.isRequired,\n\t\tlng: PropTypes.number.isRequired,\n\t}),\n\tpanTo: PropTypes.func,\n};\nPlaceAutoComplete.defaultProps = {\n\tlocation: {\n\t\tlat: 47.60621,\n\t\tlng: -122.33207,\n\t},\n};\nexport default PlaceAutoComplete;\n"]},"metadata":{},"sourceType":"module"}