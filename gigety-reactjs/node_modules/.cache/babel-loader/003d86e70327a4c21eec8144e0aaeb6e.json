{"ast":null,"code":"/* import React, { createContext } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useGigUser } from 'redux/hooks/useGigUser';\nimport { GIGETY_MESSENGER_URL } from '../constants';\nimport { updateChatMessages, updateUserMessageNotifications } from '../redux/actions/messagesAction';\n//import * as stomp from '@stomp/stompjs';\n//import * as SockJS from 'sockjs-client';\nconst StompClientContext = createContext(null);\nexport { StompClientContext };\nconst MessageContext = ({ children }) => {\n\tlet stompClient = null;\n\tlet wrappedStompClient = null;\n\tconst giguser = useGigUser();\n\tconst onConnected = () => {\n\t\tconsole.log('SockJS iiiiiiissssss COnnected to STOMP protocol');\n\t\tconsole.log('may be a good place to subscribe to user specific messages so they can be notified');\n\t\t// const onMessageRecieved = (msg) => {\n\t\t// \tconst notification = JSON.parse(msg.body);\n\t\t// \tconsole.log('ALERT NOTIFICATION ::', notification);\n\t\t// \tdispatch(updateUserMessageNotifications(notification));\n\t\t// };\n\t\t// if (giguser) {\n\t\t// \tstompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved);\n\t\t// }\n\t};\n\n\tconst onError = (error) => {\n\t\tconsole.error('GIGETY ERROR in STompCLientContext');\n\t\tconsole.error(error);\n\t};\n\n\t//Connect stompClient to gigety-ws-service\n\tconst stomp = require('stompjs');\n\tlet SockJS = require('sockjs-client');\n\tSockJS = new SockJS(GIGETY_MESSENGER_URL + '/ws');\n\t//SockJS = new SockJS('http://localhost:7070/messenger/ws', null, {});\n\tstompClient = stomp.over(SockJS);\n\tstompClient.connect({}, onConnected, onError);\n\n\tstompClient.debug = (f) => f;\n\tconst dispatch = useDispatch();\n\n\tconst sendChatMessage = (message) => {\n\t\tconsole.log(`sending Message ${message.body}`, message);\n\t\tstompClient.send('/msg/chat', {}, JSON.stringify(message));\n\t\tconsole.log('SSSSENNNNT');\n\t\tdispatch(updateChatMessages(message));\n\t};\n\twrappedStompClient = {\n\t\tstomp,\n\t\tSockJS,\n\t\tstompClient,\n\t\tsendChatMessage,\n\t};\n\n\tconsole.log(`CONFIGURATION:::: wrappedStompClient = ${wrappedStompClient}`);\n\treturn <StompClientContext.Provider value={wrappedStompClient}>{children}</StompClientContext.Provider>;\n};\n\nexport default MessageContext;\n */","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/contexts/StompClientContext.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/* import React, { createContext } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useGigUser } from 'redux/hooks/useGigUser';\nimport { GIGETY_MESSENGER_URL } from '../constants';\nimport { updateChatMessages, updateUserMessageNotifications } from '../redux/actions/messagesAction';\n//import * as stomp from '@stomp/stompjs';\n//import * as SockJS from 'sockjs-client';\nconst StompClientContext = createContext(null);\nexport { StompClientContext };\nconst MessageContext = ({ children }) => {\n\tlet stompClient = null;\n\tlet wrappedStompClient = null;\n\tconst giguser = useGigUser();\n\tconst onConnected = () => {\n\t\tconsole.log('SockJS iiiiiiissssss COnnected to STOMP protocol');\n\t\tconsole.log('may be a good place to subscribe to user specific messages so they can be notified');\n\t\t// const onMessageRecieved = (msg) => {\n\t\t// \tconst notification = JSON.parse(msg.body);\n\t\t// \tconsole.log('ALERT NOTIFICATION ::', notification);\n\t\t// \tdispatch(updateUserMessageNotifications(notification));\n\t\t// };\n\t\t// if (giguser) {\n\t\t// \tstompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved);\n\t\t// }\n\t};\n\n\tconst onError = (error) => {\n\t\tconsole.error('GIGETY ERROR in STompCLientContext');\n\t\tconsole.error(error);\n\t};\n\n\t//Connect stompClient to gigety-ws-service\n\tconst stomp = require('stompjs');\n\tlet SockJS = require('sockjs-client');\n\tSockJS = new SockJS(GIGETY_MESSENGER_URL + '/ws');\n\t//SockJS = new SockJS('http://localhost:7070/messenger/ws', null, {});\n\tstompClient = stomp.over(SockJS);\n\tstompClient.connect({}, onConnected, onError);\n\n\tstompClient.debug = (f) => f;\n\tconst dispatch = useDispatch();\n\n\tconst sendChatMessage = (message) => {\n\t\tconsole.log(`sending Message ${message.body}`, message);\n\t\tstompClient.send('/msg/chat', {}, JSON.stringify(message));\n\t\tconsole.log('SSSSENNNNT');\n\t\tdispatch(updateChatMessages(message));\n\t};\n\twrappedStompClient = {\n\t\tstomp,\n\t\tSockJS,\n\t\tstompClient,\n\t\tsendChatMessage,\n\t};\n\n\tconsole.log(`CONFIGURATION:::: wrappedStompClient = ${wrappedStompClient}`);\n\treturn <StompClientContext.Provider value={wrappedStompClient}>{children}</StompClientContext.Provider>;\n};\n\nexport default MessageContext;\n */\n"]},"metadata":{},"sourceType":"module"}