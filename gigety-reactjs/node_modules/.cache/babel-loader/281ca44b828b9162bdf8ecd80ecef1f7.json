{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatMessenger/ChatMessenger.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport { use121ChatMessages } from 'redux/hooks/useMessages';\nimport { List } from 'semantic-ui-react';\nimport ContactAvatar from '../ContactAvatar/ContactAvatar';\nimport MessageInput from '../MessageInput/MessageInput';\nimport { findMessagesFor121Chat, updateChatMessages } from 'redux/actions/messagesAction';\nimport { GIGETY_MESSENGER_URL } from '../../../constants';\n\nconst ChatMessenger = ({\n  activeContact\n}) => {\n  _s();\n\n  const {\n    giguser\n  } = useSelector(state => state.giguser);\n  console.log('SockJS ', SockJS);\n  const messages = use121ChatMessages(giguser.id, activeContact.contactId); //useMessenger(giguser, activeContact);\n  //onst { stompClient } = useContext(StompClientContext);\n\n  const sendChatMessage = useRef(null);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    let subId = ''; //const stomp = require('stompjs');\n    //let SockJS = require('sockjs-client');\n\n    const sockJS = new SockJS(GIGETY_MESSENGER_URL + '/ws');\n\n    sockJS.onopen = () => {\n      console.log('SOCKJS is CONNECTED AND OPEN FOR MESSAGING');\n    };\n\n    sockJS.onmessage = message => {\n      console.log('SOCKJS RECIEVED A MESSAGE :: ', message);\n    };\n\n    sockJS.onclose = () => {\n      stompClient.unsubscribe(subId);\n    };\n\n    const stompClient = Stomp.stomp.over(sockJS);\n\n    stompClient.debug = f => f;\n\n    const onError = error => {\n      console.log('ERRRRRRRRRRRRRRR : ', error);\n    };\n\n    sendChatMessage.current = message => {\n      stompClient.send('/msg/chat', {}, JSON.stringify(message));\n      dispatch(updateChatMessages(message));\n    };\n\n    const onConnected = () => {\n      const onMessageRecieved = msg => {\n        const notification = JSON.parse(msg.body);\n\n        if (activeContact.contactId === notification.senderId) {\n          dispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n        }\n      };\n\n      const {\n        id\n      } = stompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved);\n      subId = id;\n    };\n\n    stompClient.connect({}, onConnected, onError);\n  }, [giguser, dispatch, activeContact]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ScrollToBottom, {\n      className: \"messages\",\n      children: /*#__PURE__*/_jsxDEV(List, {\n        children: messages ? messages.map(msg => /*#__PURE__*/_jsxDEV(List.Item, {\n          children: [/*#__PURE__*/_jsxDEV(ContactAvatar, {\n            size: \"large\",\n            contact: activeContact\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(List.Content, {\n            children: /*#__PURE__*/_jsxDEV(List.Description, {\n              children: msg.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 10\n          }, this)]\n        }, msg.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this)) : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      activeContact: activeContact,\n      giguser: giguser,\n      sendChatMessage: sendChatMessage.current\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChatMessenger, \"f79E7NNfKAFC0zGKFJK5edDpZvw=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ChatMessenger;\nChatMessenger.propTypes = {\n  activeContact: PropTypes.shape({\n    contactId: PropTypes.string\n  })\n};\nChatMessenger.defaultProps = {\n  activeContact: {\n    contactId: '0'\n  }\n};\nexport default ChatMessenger;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatMessenger\");","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatMessenger/ChatMessenger.js"],"names":["React","useEffect","useRef","PropTypes","useDispatch","useSelector","ScrollToBottom","SockJS","Stomp","use121ChatMessages","List","ContactAvatar","MessageInput","findMessagesFor121Chat","updateChatMessages","GIGETY_MESSENGER_URL","ChatMessenger","activeContact","giguser","state","console","log","messages","id","contactId","sendChatMessage","dispatch","subId","sockJS","onopen","onmessage","message","onclose","stompClient","unsubscribe","stomp","over","debug","f","onError","error","current","send","JSON","stringify","onConnected","onMessageRecieved","msg","notification","parse","body","senderId","subscribe","connect","map","content","propTypes","shape","string","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport { use121ChatMessages } from 'redux/hooks/useMessages';\nimport { List } from 'semantic-ui-react';\nimport ContactAvatar from '../ContactAvatar/ContactAvatar';\nimport MessageInput from '../MessageInput/MessageInput';\nimport { findMessagesFor121Chat, updateChatMessages } from 'redux/actions/messagesAction';\nimport { GIGETY_MESSENGER_URL } from '../../../constants';\nconst ChatMessenger = ({ activeContact }) => {\n\tconst { giguser } = useSelector((state) => state.giguser);\n\tconsole.log('SockJS ', SockJS);\n\tconst messages = use121ChatMessages(giguser.id, activeContact.contactId);\n\t//useMessenger(giguser, activeContact);\n\t//onst { stompClient } = useContext(StompClientContext);\n\tconst sendChatMessage = useRef(null);\n\tconst dispatch = useDispatch();\n\tuseEffect(() => {\n\t\tlet subId = '';\n\t\t//const stomp = require('stompjs');\n\t\t//let SockJS = require('sockjs-client');\n\t\tconst sockJS = new SockJS(GIGETY_MESSENGER_URL + '/ws');\n\t\tsockJS.onopen = () => {\n\t\t\tconsole.log('SOCKJS is CONNECTED AND OPEN FOR MESSAGING');\n\t\t};\n\t\tsockJS.onmessage = (message) => {\n\t\t\tconsole.log('SOCKJS RECIEVED A MESSAGE :: ', message);\n\t\t};\n\t\tsockJS.onclose = () => {\n\t\t\tstompClient.unsubscribe(subId);\n\t\t};\n\t\tconst stompClient = Stomp.stomp.over(sockJS);\n\t\tstompClient.debug = (f) => f;\n\t\tconst onError = (error) => {\n\t\t\tconsole.log('ERRRRRRRRRRRRRRR : ', error);\n\t\t};\n\t\tsendChatMessage.current = (message) => {\n\t\t\tstompClient.send('/msg/chat', {}, JSON.stringify(message));\n\t\t\tdispatch(updateChatMessages(message));\n\t\t};\n\t\tconst onConnected = () => {\n\t\t\tconst onMessageRecieved = (msg) => {\n\t\t\t\tconst notification = JSON.parse(msg.body);\n\t\t\t\tif (activeContact.contactId === notification.senderId) {\n\t\t\t\t\tdispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n\t\t\t\t}\n\t\t\t};\n\t\t\tconst { id } = stompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved);\n\t\t\tsubId = id;\n\t\t};\n\t\tstompClient.connect({}, onConnected, onError);\n\t}, [giguser, dispatch, activeContact]);\n\treturn (\n\t\t<>\n\t\t\t<ScrollToBottom className=\"messages\">\n\t\t\t\t<List>\n\t\t\t\t\t{messages\n\t\t\t\t\t\t? messages.map((msg) => (\n\t\t\t\t\t\t\t\t<List.Item key={msg.id}>\n\t\t\t\t\t\t\t\t\t<ContactAvatar size=\"large\" contact={activeContact} />\n\t\t\t\t\t\t\t\t\t<List.Content>\n\t\t\t\t\t\t\t\t\t\t<List.Description>{msg.content}</List.Description>\n\t\t\t\t\t\t\t\t\t</List.Content>\n\t\t\t\t\t\t\t\t</List.Item>\n\t\t\t\t\t\t  ))\n\t\t\t\t\t\t: ''}\n\t\t\t\t</List>\n\t\t\t</ScrollToBottom>\n\t\t\t<MessageInput\n\t\t\t\tactiveContact={activeContact}\n\t\t\t\tgiguser={giguser}\n\t\t\t\tsendChatMessage={sendChatMessage.current}\n\t\t\t></MessageInput>\n\t\t</>\n\t);\n};\n\nChatMessenger.propTypes = {\n\tactiveContact: PropTypes.shape({\n\t\tcontactId: PropTypes.string,\n\t}),\n};\nChatMessenger.defaultProps = {\n\tactiveContact: { contactId: '0' },\n};\nexport default ChatMessenger;\n"]},"metadata":{},"sourceType":"module"}