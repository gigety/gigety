{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { StompClientContext } from 'contexts/StompClientContext';\nimport { useContext, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { findMessagesFor121Chat, findNewUserMessages, findUserMessageNotifications } from '../actions/messagesAction';\nexport const use121ChatMessages = (senderId, recipientId) => {\n  _s();\n\n  const content = useSelector(state => state.messages);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(findMessagesFor121Chat(senderId, recipientId));\n  }, [dispatch, senderId, recipientId]);\n  return content.messages;\n};\n\n_s(use121ChatMessages, \"C7Gsg2cuNtyu1IT4jiHEh9hf2uY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\nexport const useAllUserMessageNotifications = userId => {\n  _s2();\n\n  const content = useSelector(state => state.messages);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(findUserMessageNotifications(userId));\n  }, [dispatch, userId]);\n  return content.messageNotifications;\n};\n\n_s2(useAllUserMessageNotifications, \"C7Gsg2cuNtyu1IT4jiHEh9hf2uY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\nexport const useAllNewUserMessages = userId => {\n  _s3();\n\n  const content = useSelector(state => state.messages);\n  console.log(content);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(findNewUserMessages(userId));\n  }, [dispatch, userId]);\n  return content.newMessages;\n};\n\n_s3(useAllNewUserMessages, \"C7Gsg2cuNtyu1IT4jiHEh9hf2uY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\nexport const useMessenger = (giguser, contact) => {\n  _s4();\n\n  const {\n    stompClient\n  } = useContext(StompClientContext);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (stompClient.connected) {\n      const onMessageRecieved = msg => {\n        console.log('RECEIVED MESSAGE +++++++++++++++++++', contact);\n        const notification = JSON.parse(msg.body);\n\n        if (contact.contactId === notification.senderId) {\n          console.log('WE FOUND A MATCH');\n          dispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n        }\n      };\n\n      const {\n        id\n      } = stompClient.subscribe(`/user/${giguser.id}/queue}/messages`, onMessageRecieved);\n      return () => {\n        console.log(`here we unsubscibe to id ${id}, you best check this is proper way to unsubscribe`);\n        stompClient.unsubscribe(id);\n      };\n    }\n  }, [giguser, contact, stompClient, dispatch]);\n};\n\n_s4(useMessenger, \"JyXUsnutvk4mc7z4kllsd9F6KiQ=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/src/redux/hooks/useMessages.js"],"names":["StompClientContext","useContext","useEffect","useDispatch","useSelector","findMessagesFor121Chat","findNewUserMessages","findUserMessageNotifications","use121ChatMessages","senderId","recipientId","content","state","messages","dispatch","useAllUserMessageNotifications","userId","messageNotifications","useAllNewUserMessages","console","log","newMessages","useMessenger","giguser","contact","stompClient","connected","onMessageRecieved","msg","notification","JSON","parse","body","contactId","id","subscribe","unsubscribe"],"mappings":"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","sourcesContent":["import { StompClientContext } from 'contexts/StompClientContext';\nimport { useContext, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { findMessagesFor121Chat, findNewUserMessages, findUserMessageNotifications } from '../actions/messagesAction';\n\nexport const use121ChatMessages = (senderId, recipientId) => {\n\tconst content = useSelector((state) => state.messages);\n\tconst dispatch = useDispatch();\n\tuseEffect(() => {\n\t\tdispatch(findMessagesFor121Chat(senderId, recipientId));\n\t}, [dispatch, senderId, recipientId]);\n\treturn content.messages;\n};\n\nexport const useAllUserMessageNotifications = (userId) => {\n\tconst content = useSelector((state) => state.messages);\n\tconst dispatch = useDispatch();\n\tuseEffect(() => {\n\t\tdispatch(findUserMessageNotifications(userId));\n\t}, [dispatch, userId]);\n\treturn content.messageNotifications;\n};\n\nexport const useAllNewUserMessages = (userId) => {\n\tconst content = useSelector((state) => state.messages);\n\tconsole.log(content);\n\tconst dispatch = useDispatch();\n\tuseEffect(() => {\n\t\tdispatch(findNewUserMessages(userId));\n\t}, [dispatch, userId]);\n\treturn content.newMessages;\n};\nexport const useMessenger = (giguser, contact) => {\n\tconst { stompClient } = useContext(StompClientContext);\n\tconst dispatch = useDispatch();\n\tuseEffect(() => {\n\t\tif (stompClient.connected) {\n\t\t\tconst onMessageRecieved = (msg) => {\n\t\t\t\tconsole.log('RECEIVED MESSAGE +++++++++++++++++++', contact);\n\t\t\t\tconst notification = JSON.parse(msg.body);\n\t\t\t\tif (contact.contactId === notification.senderId) {\n\t\t\t\t\tconsole.log('WE FOUND A MATCH');\n\t\t\t\t\tdispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n\t\t\t\t}\n\t\t\t};\n\t\t\tconst { id } = stompClient.subscribe(`/user/${giguser.id}/queue}/messages`, onMessageRecieved);\n\n\t\t\treturn () => {\n\t\t\t\tconsole.log(`here we unsubscibe to id ${id}, you best check this is proper way to unsubscribe`);\n\t\t\t\tstompClient.unsubscribe(id);\n\t\t\t};\n\t\t}\n\t}, [giguser, contact, stompClient, dispatch]);\n};\n"]},"metadata":{},"sourceType":"module"}