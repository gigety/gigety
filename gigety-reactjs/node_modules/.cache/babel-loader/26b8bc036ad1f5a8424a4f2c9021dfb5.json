{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/MessengerPage/MessengerPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useGigUser } from 'redux/hooks/useGigUser';\nimport { useAllNewUserMessages } from 'redux/hooks/useMessages';\nimport { Container, Grid, GridColumn } from 'semantic-ui-react';\nimport ChatMessenger from '../ChatMessenger/ChatMessenger';\nimport ContactList from '../ContactList/ContactList';\nimport MessageInput from '../MessageInput/MessageInput';\nimport NotificationsScrollable from '../NotificationsScrollable/NotificationsScrollable';\nimport { StompClientContext } from 'contexts/StompClientContext';\nimport { useActiveContact, useContacts } from 'redux/hooks/useContacts';\n\nconst MessengerPage = () => {\n  _s();\n\n  //const { giguser } = useSelector((state) => state.giguser);\n  const giguser = useGigUser();\n  console.log(giguser);\n  const allNewUserMessages = useAllNewUserMessages(giguser.id);\n  console.log('messages :: ', allNewUserMessages);\n  const [text, setText] = useState('');\n  const contacts = useContacts(giguser.id);\n  const activeContact = useActiveContact();\n  const {\n    sendChatMessage\n  } = useContext(StompClientContext);\n\n  const sendTheMessage = msg => {\n    if (msg.trim() !== '') {\n      const message = {\n        senderId: giguser.id,\n        recipientId: activeContact.userId,\n        senderName: giguser.name,\n        recipientName: activeContact.userName,\n        content: msg,\n        timestamp: new Date()\n      };\n      console.log('sending msg: ', msg);\n      sendChatMessage(message);\n      console.log('msg sent', message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      celled: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid.Row, {\n        children: [/*#__PURE__*/_jsxDEV(GridColumn, {\n          width: 4,\n          children: /*#__PURE__*/_jsxDEV(NotificationsScrollable, {\n            giguser: giguser,\n            messages: messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n          width: 6,\n          children: /*#__PURE__*/_jsxDEV(ChatMessenger, {\n            activeContact: activeContact\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Grid.Row, {\n        children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n          width: 4,\n          children: /*#__PURE__*/_jsxDEV(ContactList, {\n            contacts: contacts\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n          width: 6,\n          children: /*#__PURE__*/_jsxDEV(MessageInput, {\n            text: text,\n            setText: setText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 3\n  }, this);\n};\n\n_s(MessengerPage, \"3GJ+khOTXxoQrlnmjS3QOidFScs=\", false, function () {\n  return [useGigUser, useAllNewUserMessages, useContacts, useActiveContact];\n});\n\n_c = MessengerPage;\nexport default MessengerPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessengerPage\");","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/MessengerPage/MessengerPage.js"],"names":["React","useState","useContext","useEffect","useDispatch","useSelector","useGigUser","useAllNewUserMessages","Container","Grid","GridColumn","ChatMessenger","ContactList","MessageInput","NotificationsScrollable","StompClientContext","useActiveContact","useContacts","MessengerPage","giguser","console","log","allNewUserMessages","id","text","setText","contacts","activeContact","sendChatMessage","sendTheMessage","msg","trim","message","senderId","recipientId","userId","senderName","name","recipientName","userName","content","timestamp","Date","messages"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useGigUser } from 'redux/hooks/useGigUser';\nimport { useAllNewUserMessages } from 'redux/hooks/useMessages';\nimport { Container, Grid, GridColumn } from 'semantic-ui-react';\nimport ChatMessenger from '../ChatMessenger/ChatMessenger';\nimport ContactList from '../ContactList/ContactList';\nimport MessageInput from '../MessageInput/MessageInput';\nimport NotificationsScrollable from '../NotificationsScrollable/NotificationsScrollable';\nimport { StompClientContext } from 'contexts/StompClientContext';\nimport { useActiveContact, useContacts } from 'redux/hooks/useContacts';\nconst MessengerPage = () => {\n\t//const { giguser } = useSelector((state) => state.giguser);\n\tconst giguser = useGigUser();\n\tconsole.log(giguser);\n\tconst allNewUserMessages = useAllNewUserMessages(giguser.id);\n\tconsole.log('messages :: ', allNewUserMessages);\n\tconst [text, setText] = useState('');\n\tconst contacts = useContacts(giguser.id);\n\tconst activeContact = useActiveContact();\n\tconst { sendChatMessage } = useContext(StompClientContext);\n\n\tconst sendTheMessage = (msg) => {\n\t\tif (msg.trim() !== '') {\n\t\t\tconst message = {\n\t\t\t\tsenderId: giguser.id,\n\t\t\t\trecipientId: activeContact.userId,\n\t\t\t\tsenderName: giguser.name,\n\t\t\t\trecipientName: activeContact.userName,\n\t\t\t\tcontent: msg,\n\t\t\t\ttimestamp: new Date(),\n\t\t\t};\n\t\t\tconsole.log('sending msg: ', msg);\n\t\t\tsendChatMessage(message);\n\t\t\tconsole.log('msg sent', message);\n\t\t}\n\t};\n\treturn (\n\t\t<Container fluid>\n\t\t\t<Grid celled>\n\t\t\t\t<Grid.Row>\n\t\t\t\t\t<GridColumn width={4}>\n\t\t\t\t\t\t<NotificationsScrollable giguser={giguser} messages={messages} />\n\t\t\t\t\t</GridColumn>\n\t\t\t\t\t<GridColumn width={6}>\n\t\t\t\t\t\t<ChatMessenger activeContact={activeContact}></ChatMessenger>\n\t\t\t\t\t</GridColumn>\n\t\t\t\t</Grid.Row>\n\t\t\t\t<Grid.Row>\n\t\t\t\t\t<Grid.Column width={4}>\n\t\t\t\t\t\t<ContactList contacts={contacts}></ContactList>\n\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t<Grid.Column width={6}>\n\t\t\t\t\t\t<MessageInput text={text} setText={setText}></MessageInput>\n\t\t\t\t\t</Grid.Column>\n\t\t\t\t</Grid.Row>\n\t\t\t</Grid>\n\t\t</Container>\n\t);\n};\n\nexport default MessengerPage;\n"]},"metadata":{},"sourceType":"module"}