{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatMessenger/ChatMessenger.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport { use121ChatMessages } from 'redux/hooks/useMessages';\nimport { List } from 'semantic-ui-react';\nimport ContactAvatar from '../ContactAvatar/ContactAvatar';\nimport MessageInput from '../MessageInput/MessageInput';\nimport { findMessagesFor121Chat, updateChatMessages } from 'redux/actions/messagesAction';\nimport { GIGETY_MESSENGER_WS_URL } from '../../../constants';\n\nconst ChatMessenger = ({\n  activeContact\n}) => {\n  _s();\n\n  const {\n    giguser\n  } = useSelector(state => state.giguser);\n  const messages = use121ChatMessages(giguser.id, activeContact.contactId); //useMessenger(giguser, activeContact);\n  //onst { stompClient } = useContext(StompClientContext);\n\n  const sendChatMessage = useRef(null);\n  const dispatch = useDispatch();\n  const stompClient = useRef(null);\n  useEffect(() => {\n    const stompConfig = {\n      connectHeaders: {\n        login: 'guest',\n        passcode: 'guest'\n      },\n      brokerURL: GIGETY_MESSENGER_WS_URL,\n      debug: str => {\n        console.log(str);\n      },\n      reconnectDelay: 200,\n      onConnect: frame => {\n        const onMessageRecieved = msg => {\n          const notification = JSON.parse(msg.body);\n\n          if (activeContact.contactId === notification.senderId) {\n            dispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n          }\n        };\n\n        const {\n          id\n        } = stompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved);\n      }\n    };\n\n    sendChatMessage.current = message => {\n      stompClient.send('/msg/chat', {}, JSON.stringify(message));\n      dispatch(updateChatMessages(message));\n    };\n\n    stompClient.current = new SockJS.Client(stompConfig);\n    stompClient.activate();\n  }, [giguser, dispatch, activeContact, stompClient]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ScrollToBottom, {\n      className: \"messages\",\n      children: /*#__PURE__*/_jsxDEV(List, {\n        children: messages ? messages.map(msg => /*#__PURE__*/_jsxDEV(List.Item, {\n          children: [/*#__PURE__*/_jsxDEV(ContactAvatar, {\n            size: \"large\",\n            contact: activeContact\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(List.Content, {\n            children: /*#__PURE__*/_jsxDEV(List.Description, {\n              children: msg.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 10\n          }, this)]\n        }, msg.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }, this)) : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      activeContact: activeContact,\n      giguser: giguser,\n      sendChatMessage: sendChatMessage.current\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChatMessenger, \"PfoZztyeIummIaSPq9KDlNt7haE=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ChatMessenger;\nChatMessenger.propTypes = {\n  activeContact: PropTypes.shape({\n    contactId: PropTypes.string\n  })\n};\nChatMessenger.defaultProps = {\n  activeContact: {\n    contactId: '0'\n  }\n};\nexport default ChatMessenger;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatMessenger\");","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatMessenger/ChatMessenger.js"],"names":["React","useEffect","useRef","PropTypes","useDispatch","useSelector","ScrollToBottom","SockJS","Stomp","use121ChatMessages","List","ContactAvatar","MessageInput","findMessagesFor121Chat","updateChatMessages","GIGETY_MESSENGER_WS_URL","ChatMessenger","activeContact","giguser","state","messages","id","contactId","sendChatMessage","dispatch","stompClient","stompConfig","connectHeaders","login","passcode","brokerURL","debug","str","console","log","reconnectDelay","onConnect","frame","onMessageRecieved","msg","notification","JSON","parse","body","senderId","subscribe","current","message","send","stringify","Client","activate","map","content","propTypes","shape","string","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport { use121ChatMessages } from 'redux/hooks/useMessages';\nimport { List } from 'semantic-ui-react';\nimport ContactAvatar from '../ContactAvatar/ContactAvatar';\nimport MessageInput from '../MessageInput/MessageInput';\nimport { findMessagesFor121Chat, updateChatMessages } from 'redux/actions/messagesAction';\nimport { GIGETY_MESSENGER_WS_URL } from '../../../constants';\nconst ChatMessenger = ({ activeContact }) => {\n\tconst { giguser } = useSelector((state) => state.giguser);\n\tconst messages = use121ChatMessages(giguser.id, activeContact.contactId);\n\t//useMessenger(giguser, activeContact);\n\t//onst { stompClient } = useContext(StompClientContext);\n\tconst sendChatMessage = useRef(null);\n\tconst dispatch = useDispatch();\n\tconst stompClient = useRef(null);\n\tuseEffect(() => {\n\t\tconst stompConfig = {\n\t\t\tconnectHeaders: {\n\t\t\t\tlogin: 'guest',\n\t\t\t\tpasscode: 'guest',\n\t\t\t},\n\t\t\tbrokerURL: GIGETY_MESSENGER_WS_URL,\n\t\t\tdebug: (str) => {\n\t\t\t\tconsole.log(str);\n\t\t\t},\n\t\t\treconnectDelay: 200,\n\t\t\tonConnect: (frame) => {\n\t\t\t\tconst onMessageRecieved = (msg) => {\n\t\t\t\t\tconst notification = JSON.parse(msg.body);\n\t\t\t\t\tif (activeContact.contactId === notification.senderId) {\n\t\t\t\t\t\tdispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tconst { id } = stompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved);\n\t\t\t},\n\t\t};\n\n\t\tsendChatMessage.current = (message) => {\n\t\t\tstompClient.send('/msg/chat', {}, JSON.stringify(message));\n\t\t\tdispatch(updateChatMessages(message));\n\t\t};\n\t\tstompClient.current = new SockJS.Client(stompConfig);\n\n\t\tstompClient.activate();\n\t}, [giguser, dispatch, activeContact, stompClient]);\n\treturn (\n\t\t<>\n\t\t\t<ScrollToBottom className=\"messages\">\n\t\t\t\t<List>\n\t\t\t\t\t{messages\n\t\t\t\t\t\t? messages.map((msg) => (\n\t\t\t\t\t\t\t\t<List.Item key={msg.id}>\n\t\t\t\t\t\t\t\t\t<ContactAvatar size=\"large\" contact={activeContact} />\n\t\t\t\t\t\t\t\t\t<List.Content>\n\t\t\t\t\t\t\t\t\t\t<List.Description>{msg.content}</List.Description>\n\t\t\t\t\t\t\t\t\t</List.Content>\n\t\t\t\t\t\t\t\t</List.Item>\n\t\t\t\t\t\t  ))\n\t\t\t\t\t\t: ''}\n\t\t\t\t</List>\n\t\t\t</ScrollToBottom>\n\t\t\t<MessageInput\n\t\t\t\tactiveContact={activeContact}\n\t\t\t\tgiguser={giguser}\n\t\t\t\tsendChatMessage={sendChatMessage.current}\n\t\t\t></MessageInput>\n\t\t</>\n\t);\n};\n\nChatMessenger.propTypes = {\n\tactiveContact: PropTypes.shape({\n\t\tcontactId: PropTypes.string,\n\t}),\n};\nChatMessenger.defaultProps = {\n\tactiveContact: { contactId: '0' },\n};\nexport default ChatMessenger;\n"]},"metadata":{},"sourceType":"module"}