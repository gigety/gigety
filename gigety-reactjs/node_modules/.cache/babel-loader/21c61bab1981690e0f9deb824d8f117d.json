{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/contexts/StompClientContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useGigUser } from 'redux/hooks/useGigUser';\nimport { GIGETY_MESSENGER_URL } from '../constants';\nimport { updateChatMessages, updateUserMessageNotifications } from '../redux/actions/messagesAction';\nimport * as stomp from '@stomp/stompjs'; //import * as SockJS from 'sockjs-client';\n\nconst StompClientContext = /*#__PURE__*/createContext(null);\nexport { StompClientContext };\n\nconst MessageContext = ({\n  children\n}) => {\n  _s();\n\n  let stompClient = null;\n  let wrappedStompClient = null;\n  const giguser = useGigUser();\n\n  const onConnected = () => {\n    /* \t\tconsole.log('SockJS iiiiiiissssss COnnected to STOMP protocol');\n    console.log('may be a good place to subscribe to user specific messages so they can be notified');\n    const onMessageRecieved = (msg) => {\n    \tconst notification = JSON.parse(msg.body);\n    \tconsole.log('ALERT NOTIFICATION ::', notification);\n    \tdispatch(updateUserMessageNotifications(notification));\n    };\n    if (giguser) {\n    \tstompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved);\n    } */\n  };\n\n  const onError = error => {\n    console.error('GIGETY ERROR in STompCLientContext');\n    console.error(error);\n  };\n\n  console.log(stomp); //console.log(SockJS);\n  //Connect stompClient to gigety-ws-service\n  //stomp = require('stompjs');\n\n  let SockJS = require('sockjs-client');\n\n  SockJS = new SockJS(GIGETY_MESSENGER_URL + '/ws'); //SockJS = new SockJS('http://localhost:7070/messenger/ws', null, {});\n\n  stompClient = stomp.Stomp.over(SockJS);\n  stompClient.connect({}, onConnected, onError);\n\n  stompClient.debug = f => f;\n\n  const dispatch = useDispatch();\n\n  const sendChatMessage = message => {\n    console.log(`sending Message ${message}`);\n    stompClient.send('/msg/chat', {}, JSON.stringify(message));\n    dispatch(updateChatMessages(message));\n  };\n\n  wrappedStompClient = {\n    stompClient,\n    sendChatMessage\n  };\n  console.log(`CONFIGURATION:::: wrappedStompClient = ${wrappedStompClient}`);\n  return /*#__PURE__*/_jsxDEV(StompClientContext.Provider, {\n    value: wrappedStompClient,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MessageContext, \"hmDje+g5IA0kLhQevsoqcp6L20I=\", false, function () {\n  return [useGigUser, useDispatch];\n});\n\n_c = MessageContext;\nexport default MessageContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageContext\");","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/contexts/StompClientContext.js"],"names":["React","createContext","useDispatch","useGigUser","GIGETY_MESSENGER_URL","updateChatMessages","updateUserMessageNotifications","stomp","StompClientContext","MessageContext","children","stompClient","wrappedStompClient","giguser","onConnected","onError","error","console","log","SockJS","require","Stomp","over","connect","debug","f","dispatch","sendChatMessage","message","send","JSON","stringify"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,oBAAT,QAAqC,cAArC;AACA,SAASC,kBAAT,EAA6BC,8BAA7B,QAAmE,iCAAnE;AACA,OAAO,KAAKC,KAAZ,MAAuB,gBAAvB,C,CACA;;AACA,MAAMC,kBAAkB,gBAAGP,aAAa,CAAC,IAAD,CAAxC;AACA,SAASO,kBAAT;;AACA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACxC,MAAIC,WAAW,GAAG,IAAlB;AACA,MAAIC,kBAAkB,GAAG,IAAzB;AACA,QAAMC,OAAO,GAAGV,UAAU,EAA1B;;AACA,QAAMW,WAAW,GAAG,MAAM;AACzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,GAXD;;AAaA,QAAMC,OAAO,GAAIC,KAAD,IAAW;AAC1BC,IAAAA,OAAO,CAACD,KAAR,CAAc,oCAAd;AACAC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,GAHD;;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ,EArBwC,CAsBxC;AACA;AACA;;AACA,MAAIY,MAAM,GAAGC,OAAO,CAAC,eAAD,CAApB;;AACAD,EAAAA,MAAM,GAAG,IAAIA,MAAJ,CAAWf,oBAAoB,GAAG,KAAlC,CAAT,CA1BwC,CA2BxC;;AACAO,EAAAA,WAAW,GAAGJ,KAAK,CAACc,KAAN,CAAYC,IAAZ,CAAiBH,MAAjB,CAAd;AACAR,EAAAA,WAAW,CAACY,OAAZ,CAAoB,EAApB,EAAwBT,WAAxB,EAAqCC,OAArC;;AAEAJ,EAAAA,WAAW,CAACa,KAAZ,GAAqBC,CAAD,IAAOA,CAA3B;;AACA,QAAMC,QAAQ,GAAGxB,WAAW,EAA5B;;AAEA,QAAMyB,eAAe,GAAIC,OAAD,IAAa;AACpCX,IAAAA,OAAO,CAACC,GAAR,CAAa,mBAAkBU,OAAQ,EAAvC;AACAjB,IAAAA,WAAW,CAACkB,IAAZ,CAAiB,WAAjB,EAA8B,EAA9B,EAAkCC,IAAI,CAACC,SAAL,CAAeH,OAAf,CAAlC;AACAF,IAAAA,QAAQ,CAACrB,kBAAkB,CAACuB,OAAD,CAAnB,CAAR;AACA,GAJD;;AAKAhB,EAAAA,kBAAkB,GAAG;AACpBD,IAAAA,WADoB;AAEpBgB,IAAAA;AAFoB,GAArB;AAKAV,EAAAA,OAAO,CAACC,GAAR,CAAa,0CAAyCN,kBAAmB,EAAzE;AACA,sBAAO,QAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEA,kBAApC;AAAA,cAAyDF;AAAzD;AAAA;AAAA;AAAA;AAAA,UAAP;AACA,CA9CD;;GAAMD,c;UAGWN,U,EA6BCD,W;;;KAhCZO,c;AAgDN,eAAeA,cAAf","sourcesContent":["import React, { createContext } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useGigUser } from 'redux/hooks/useGigUser';\nimport { GIGETY_MESSENGER_URL } from '../constants';\nimport { updateChatMessages, updateUserMessageNotifications } from '../redux/actions/messagesAction';\nimport * as stomp from '@stomp/stompjs';\n//import * as SockJS from 'sockjs-client';\nconst StompClientContext = createContext(null);\nexport { StompClientContext };\nconst MessageContext = ({ children }) => {\n\tlet stompClient = null;\n\tlet wrappedStompClient = null;\n\tconst giguser = useGigUser();\n\tconst onConnected = () => {\n\t\t/* \t\tconsole.log('SockJS iiiiiiissssss COnnected to STOMP protocol');\n\t\tconsole.log('may be a good place to subscribe to user specific messages so they can be notified');\n\t\tconst onMessageRecieved = (msg) => {\n\t\t\tconst notification = JSON.parse(msg.body);\n\t\t\tconsole.log('ALERT NOTIFICATION ::', notification);\n\t\t\tdispatch(updateUserMessageNotifications(notification));\n\t\t};\n\t\tif (giguser) {\n\t\t\tstompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved);\n\t\t} */\n\t};\n\n\tconst onError = (error) => {\n\t\tconsole.error('GIGETY ERROR in STompCLientContext');\n\t\tconsole.error(error);\n\t};\n\tconsole.log(stomp);\n\t//console.log(SockJS);\n\t//Connect stompClient to gigety-ws-service\n\t//stomp = require('stompjs');\n\tlet SockJS = require('sockjs-client');\n\tSockJS = new SockJS(GIGETY_MESSENGER_URL + '/ws');\n\t//SockJS = new SockJS('http://localhost:7070/messenger/ws', null, {});\n\tstompClient = stomp.Stomp.over(SockJS);\n\tstompClient.connect({}, onConnected, onError);\n\n\tstompClient.debug = (f) => f;\n\tconst dispatch = useDispatch();\n\n\tconst sendChatMessage = (message) => {\n\t\tconsole.log(`sending Message ${message}`);\n\t\tstompClient.send('/msg/chat', {}, JSON.stringify(message));\n\t\tdispatch(updateChatMessages(message));\n\t};\n\twrappedStompClient = {\n\t\tstompClient,\n\t\tsendChatMessage,\n\t};\n\n\tconsole.log(`CONFIGURATION:::: wrappedStompClient = ${wrappedStompClient}`);\n\treturn <StompClientContext.Provider value={wrappedStompClient}>{children}</StompClientContext.Provider>;\n};\n\nexport default MessageContext;\n"]},"metadata":{},"sourceType":"module"}