{"ast":null,"code":"import { GET_CURRENT_ADDRESS } from './types';\nimport { ProfileLocation } from '../../models/ProfileLocation';\nexport const getCurrentAddress = () => async dispatch => {\n  const location = await getCurrentPosition();\n  const {\n    latitude,\n    longitude\n  } = location.coords;\n\n  try {\n    const geocoder = new window.google.maps.Geocoder();\n    geocoder.geocode({\n      location: {\n        lat: latitude,\n        lng: longitude\n      }\n    }, (results, status) => {\n      const address = results[0];\n\n      if (address) {\n        //const { formatted_address } = address;\n        //TODO: revisit and maybe finish what you started with profileLocation\n        const profileLocation = new ProfileLocation({\n          address: address.formatted_address,\n          location: {\n            lat: address.geometry.location.lat(),\n            lng: address.geometry.location.lng()\n          }\n        });\n        localStorage.setItem('currentAddress', address);\n        dispatch({\n          type: GET_CURRENT_ADDRESS,\n          payload: address\n        });\n      }\n    });\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\nexport const getCurrentLocation = () => async dispatch => {};\n\nconst getCurrentPosition = (options = {}) => {\n  return new Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(resolve, reject, options);\n  });\n};","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/src/redux/actions/locationAction.js"],"names":["GET_CURRENT_ADDRESS","ProfileLocation","getCurrentAddress","dispatch","location","getCurrentPosition","latitude","longitude","coords","geocoder","window","google","maps","Geocoder","geocode","lat","lng","results","status","address","profileLocation","formatted_address","geometry","localStorage","setItem","type","payload","error","console","getCurrentLocation","options","Promise","resolve","reject","navigator","geolocation"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,SAApC;AACA,SAASC,eAAT,QAAgC,8BAAhC;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAC1D,QAAMC,QAAQ,GAAG,MAAMC,kBAAkB,EAAzC;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0BH,QAAQ,CAACI,MAAzC;;AACA,MAAI;AACH,UAAMC,QAAQ,GAAG,IAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,QAAvB,EAAjB;AACAJ,IAAAA,QAAQ,CAACK,OAAT,CAAiB;AAAEV,MAAAA,QAAQ,EAAE;AAAEW,QAAAA,GAAG,EAAET,QAAP;AAAiBU,QAAAA,GAAG,EAAET;AAAtB;AAAZ,KAAjB,EAAkE,CAACU,OAAD,EAAUC,MAAV,KAAqB;AACtF,YAAMC,OAAO,GAAGF,OAAO,CAAC,CAAD,CAAvB;;AACA,UAAIE,OAAJ,EAAa;AACZ;AACA;AACA,cAAMC,eAAe,GAAG,IAAInB,eAAJ,CAAoB;AAC3CkB,UAAAA,OAAO,EAAEA,OAAO,CAACE,iBAD0B;AAE3CjB,UAAAA,QAAQ,EAAE;AAAEW,YAAAA,GAAG,EAAEI,OAAO,CAACG,QAAR,CAAiBlB,QAAjB,CAA0BW,GAA1B,EAAP;AAAwCC,YAAAA,GAAG,EAAEG,OAAO,CAACG,QAAR,CAAiBlB,QAAjB,CAA0BY,GAA1B;AAA7C;AAFiC,SAApB,CAAxB;AAIAO,QAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCL,OAAvC;AACAhB,QAAAA,QAAQ,CAAC;AACRsB,UAAAA,IAAI,EAAEzB,mBADE;AAER0B,UAAAA,OAAO,EAAEP;AAFD,SAAD,CAAR;AAIA;AACD,KAfD;AAgBA,GAlBD,CAkBE,OAAOQ,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAMA,KAAN;AACA;AACD,CAzBM;AA0BP,OAAO,MAAME,kBAAkB,GAAG,MAAM,MAAO1B,QAAP,IAAoB,CAAE,CAAvD;;AAEP,MAAME,kBAAkB,GAAG,CAACyB,OAAO,GAAG,EAAX,KAAkB;AAC5C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvCC,IAAAA,SAAS,CAACC,WAAV,CAAsB9B,kBAAtB,CAAyC2B,OAAzC,EAAkDC,MAAlD,EAA0DH,OAA1D;AACA,GAFM,CAAP;AAGA,CAJD","sourcesContent":["import { GET_CURRENT_ADDRESS } from './types';\nimport { ProfileLocation } from '../../models/ProfileLocation';\n\nexport const getCurrentAddress = () => async (dispatch) => {\n\tconst location = await getCurrentPosition();\n\tconst { latitude, longitude } = location.coords;\n\ttry {\n\t\tconst geocoder = new window.google.maps.Geocoder();\n\t\tgeocoder.geocode({ location: { lat: latitude, lng: longitude } }, (results, status) => {\n\t\t\tconst address = results[0];\n\t\t\tif (address) {\n\t\t\t\t//const { formatted_address } = address;\n\t\t\t\t//TODO: revisit and maybe finish what you started with profileLocation\n\t\t\t\tconst profileLocation = new ProfileLocation({\n\t\t\t\t\taddress: address.formatted_address,\n\t\t\t\t\tlocation: { lat: address.geometry.location.lat(), lng: address.geometry.location.lng() },\n\t\t\t\t});\n\t\t\t\tlocalStorage.setItem('currentAddress', address);\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: GET_CURRENT_ADDRESS,\n\t\t\t\t\tpayload: address,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tthrow error;\n\t}\n};\nexport const getCurrentLocation = () => async (dispatch) => {};\n\nconst getCurrentPosition = (options = {}) => {\n\treturn new Promise((resolve, reject) => {\n\t\tnavigator.geolocation.getCurrentPosition(resolve, reject, options);\n\t});\n};\n"]},"metadata":{},"sourceType":"module"}