{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatMessenger/ChatMessenger.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { use121ChatMessages } from 'redux/hooks/useMessages';\nimport { List } from 'semantic-ui-react';\nimport ContactAvatar from '../ContactAvatar/ContactAvatar';\nimport MessageInput from '../MessageInput/MessageInput';\nimport { findMessagesFor121Chat, updateChatMessages } from 'redux/actions/messagesAction';\nimport { StompClientContext } from 'contexts/StompClientContext';\n\nconst ChatMessenger = ({\n  activeContact\n}) => {\n  _s();\n\n  const {\n    giguser\n  } = useSelector(state => state.giguser);\n  console.log('Active COntact :::: ', activeContact);\n  const messages = use121ChatMessages(giguser.id, activeContact.contactId); //useMessenger(giguser, activeContact);\n\n  const {\n    getStompClient,\n    addStompEventListener,\n    stompEventTypes\n  } = useContext(StompClientContext);\n  const sendChatMessage = useRef(null);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const stompClient = getStompClient();\n    console.log('Got Stomp Client', stompClient);\n    let subId = '';\n\n    sendChatMessage.current = message => {\n      stompClient.publish({\n        destination: '/msg/chat',\n        body: JSON.stringify(message)\n      });\n      dispatch(updateChatMessages(message));\n    };\n\n    const onConnected = () => {\n      const onMessageRecieved = msg => {\n        //TODO: get the contact and user from getState() and make this a custom hook or context\n        console.log('++++++RECIEVED MSG++++++', msg);\n        const notification = JSON.parse(msg.body);\n\n        if (activeContact.contactId === notification.senderId) {\n          dispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n        }\n      };\n\n      console.log('Gigety SubScribing .......');\n      const {\n        id\n      } = stompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved);\n      subId = id;\n    };\n\n    addStompEventListener({\n      eventType: stompEventTypes.Connect,\n      emitted: onConnected,\n      isOnce: true\n    });\n    return () => {\n      if (stompClient) {\n        console.log('UNSUBSCRIBING ...');\n        stompClient.unsubscribe(subId);\n      }\n    };\n  }, [giguser, dispatch, activeContact, addStompEventListener, getStompClient, stompEventTypes]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ScrollToBottom, {\n      className: \"messages\",\n      children: /*#__PURE__*/_jsxDEV(List, {\n        children: messages ? messages.map(msg => /*#__PURE__*/_jsxDEV(List.Item, {\n          children: [/*#__PURE__*/_jsxDEV(ContactAvatar, {\n            size: \"large\",\n            contact: activeContact\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(List.Content, {\n            children: /*#__PURE__*/_jsxDEV(List.Description, {\n              children: msg.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 10\n          }, this)]\n        }, msg.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }, this)) : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      activeContact: activeContact,\n      giguser: giguser,\n      sendChatMessage: sendChatMessage.current\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChatMessenger, \"Yt4RoJyF1LOQ6K+kkqJuab6v4CM=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ChatMessenger;\nChatMessenger.propTypes = {\n  activeContact: PropTypes.shape({\n    contactId: PropTypes.string,\n    contactName: PropTypes.string,\n    contactImageUrl: PropTypes.string\n  })\n};\nChatMessenger.defaultProps = {\n  activeContact: {\n    contactId: '0'\n  }\n};\nexport default ChatMessenger;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatMessenger\");","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/components/Messenger/ChatMessenger/ChatMessenger.js"],"names":["React","useContext","useEffect","useRef","PropTypes","useDispatch","useSelector","ScrollToBottom","use121ChatMessages","List","ContactAvatar","MessageInput","findMessagesFor121Chat","updateChatMessages","StompClientContext","ChatMessenger","activeContact","giguser","state","console","log","messages","id","contactId","getStompClient","addStompEventListener","stompEventTypes","sendChatMessage","dispatch","stompClient","subId","current","message","publish","destination","body","JSON","stringify","onConnected","onMessageRecieved","msg","notification","parse","senderId","subscribe","eventType","Connect","emitted","isOnce","unsubscribe","map","content","propTypes","shape","string","contactName","contactImageUrl","defaultProps"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useRef } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { use121ChatMessages } from 'redux/hooks/useMessages';\nimport { List } from 'semantic-ui-react';\nimport ContactAvatar from '../ContactAvatar/ContactAvatar';\nimport MessageInput from '../MessageInput/MessageInput';\nimport { findMessagesFor121Chat, updateChatMessages } from 'redux/actions/messagesAction';\nimport { StompClientContext } from 'contexts/StompClientContext';\nconst ChatMessenger = ({ activeContact }) => {\n\tconst { giguser } = useSelector((state) => state.giguser);\n\n\tconsole.log('Active COntact :::: ', activeContact);\n\tconst messages = use121ChatMessages(giguser.id, activeContact.contactId);\n\t//useMessenger(giguser, activeContact);\n\tconst { getStompClient, addStompEventListener, stompEventTypes } = useContext(StompClientContext);\n\tconst sendChatMessage = useRef(null);\n\tconst dispatch = useDispatch();\n\tuseEffect(() => {\n\t\tconst stompClient = getStompClient();\n\t\tconsole.log('Got Stomp Client', stompClient);\n\t\tlet subId = '';\n\t\tsendChatMessage.current = (message) => {\n\t\t\tstompClient.publish({ destination: '/msg/chat', body: JSON.stringify(message) });\n\t\t\tdispatch(updateChatMessages(message));\n\t\t};\n\n\t\tconst onConnected = () => {\n\t\t\tconst onMessageRecieved = (msg) => {\n\t\t\t\t//TODO: get the contact and user from getState() and make this a custom hook or context\n\t\t\t\tconsole.log('++++++RECIEVED MSG++++++', msg);\n\t\t\t\tconst notification = JSON.parse(msg.body);\n\t\t\t\tif (activeContact.contactId === notification.senderId) {\n\t\t\t\t\tdispatch(findMessagesFor121Chat(giguser.id, notification.senderId));\n\t\t\t\t}\n\t\t\t};\n\t\t\tconsole.log('Gigety SubScribing .......');\n\t\t\tconst { id } = stompClient.subscribe(`/user/${giguser.id}/queue/messages`, onMessageRecieved);\n\t\t\tsubId = id;\n\t\t};\n\t\taddStompEventListener({ eventType: stompEventTypes.Connect, emitted: onConnected, isOnce: true });\n\t\treturn () => {\n\t\t\tif (stompClient) {\n\t\t\t\tconsole.log('UNSUBSCRIBING ...');\n\t\t\t\tstompClient.unsubscribe(subId);\n\t\t\t}\n\t\t};\n\t}, [giguser, dispatch, activeContact, addStompEventListener, getStompClient, stompEventTypes]);\n\treturn (\n\t\t<>\n\t\t\t<ScrollToBottom className=\"messages\">\n\t\t\t\t<List>\n\t\t\t\t\t{messages\n\t\t\t\t\t\t? messages.map((msg) => (\n\t\t\t\t\t\t\t\t<List.Item key={msg.id}>\n\t\t\t\t\t\t\t\t\t<ContactAvatar size=\"large\" contact={activeContact} />\n\t\t\t\t\t\t\t\t\t<List.Content>\n\t\t\t\t\t\t\t\t\t\t<List.Description>{msg.content}</List.Description>\n\t\t\t\t\t\t\t\t\t</List.Content>\n\t\t\t\t\t\t\t\t</List.Item>\n\t\t\t\t\t\t  ))\n\t\t\t\t\t\t: ''}\n\t\t\t\t</List>\n\t\t\t</ScrollToBottom>\n\t\t\t<MessageInput\n\t\t\t\tactiveContact={activeContact}\n\t\t\t\tgiguser={giguser}\n\t\t\t\tsendChatMessage={sendChatMessage.current}\n\t\t\t></MessageInput>\n\t\t</>\n\t);\n};\n\nChatMessenger.propTypes = {\n\tactiveContact: PropTypes.shape({\n\t\tcontactId: PropTypes.string,\n\t\tcontactName: PropTypes.string,\n\t\tcontactImageUrl: PropTypes.string,\n\t}),\n};\nChatMessenger.defaultProps = {\n\tactiveContact: { contactId: '0' },\n};\nexport default ChatMessenger;\n"]},"metadata":{},"sourceType":"module"}