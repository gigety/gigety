{"ast":null,"code":"import { GET_ERRORS, UPDATE_CHAT_MESSAGES, UPDATE_MESSAGE_NOTIFICATIONS, UPDATE_NEW_USER_MESSAGES } from './types';\nimport gigetyMessenger from 'apis/gigetyMessenger';\nimport _ from 'lodash';\nexport const updateChatMessages = message => (dispatch, getState) => {\n  message.id = _.random(6, 12, true);\n  const messages = [...getState().messages.messages, message];\n  dispatch({\n    type: UPDATE_CHAT_MESSAGES,\n    payload: messages\n  });\n};\nexport function sendMessage(msg_id, msg) {\n  //use stompclient to send message\n  return {};\n}\nexport const findMessagesFor121Chat = (currentUserId, profileId) => async dispatch => {\n  try {\n    console.log('SSSSSSIUKHBSKJBSKUBSKBJSKUBSKUBSKUB');\n    const response = await gigetyMessenger.get(`/messages/${currentUserId}/${profileId}`);\n    dispatch({\n      type: UPDATE_CHAT_MESSAGES,\n      payload: response.data\n    });\n  } catch (error) {\n    console.error('ERROR :: ', error);\n    dispatch({\n      type: GET_ERRORS,\n      payload: error\n    });\n  }\n};\nexport const updateUserMessageNotifications = notification => dispatch => {\n  console.log('UPDATING NOTIFICATION ----- ', notification);\n  dispatch({\n    type: UPDATE_MESSAGE_NOTIFICATIONS,\n    payload: notification\n  });\n};\nexport const findUserMessageNotifications = userId => async dispatch => {\n  try {\n    const response = await gigetyMessenger.get(`/user/${userId}/queue/messages`);\n    console.log('RESPONSEEEE :: ', response);\n    dispatch({\n      type: UPDATE_MESSAGE_NOTIFICATIONS,\n      payload: response.data\n    });\n  } catch (error) {\n    console.error('ERROR :: ', error);\n    dispatch({\n      type: GET_ERRORS,\n      payload: error\n    });\n  }\n};\nexport const findNewUserMessages = userId => async dispatch => {\n  try {\n    const response = await gigetyMessenger.get(`/messages/status/RECEIVED/${userId}`);\n    console.log('Found new user messages: ', response.data);\n    dispatch({\n      type: UPDATE_NEW_USER_MESSAGES,\n      payload: response.data\n    });\n  } catch (error) {\n    console.error('ERROR :: ', error);\n    dispatch({\n      type: GET_ERRORS,\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/redux/actions/messagesAction.js"],"names":["GET_ERRORS","UPDATE_CHAT_MESSAGES","UPDATE_MESSAGE_NOTIFICATIONS","UPDATE_NEW_USER_MESSAGES","gigetyMessenger","_","updateChatMessages","message","dispatch","getState","id","random","messages","type","payload","sendMessage","msg_id","msg","findMessagesFor121Chat","currentUserId","profileId","console","log","response","get","data","error","updateUserMessageNotifications","notification","findUserMessageNotifications","userId","findNewUserMessages"],"mappings":"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","sourcesContent":["import { GET_ERRORS, UPDATE_CHAT_MESSAGES, UPDATE_MESSAGE_NOTIFICATIONS, UPDATE_NEW_USER_MESSAGES } from './types';\nimport gigetyMessenger from 'apis/gigetyMessenger';\nimport _ from 'lodash';\nexport const updateChatMessages = (message) => (dispatch, getState) => {\n\tmessage.id = _.random(6, 12, true);\n\tconst messages = [...getState().messages.messages, message];\n\tdispatch({\n\t\ttype: UPDATE_CHAT_MESSAGES,\n\t\tpayload: messages,\n\t});\n};\n\nexport function sendMessage(msg_id, msg) {\n\t//use stompclient to send message\n\treturn {};\n}\n\nexport const findMessagesFor121Chat = (currentUserId, profileId) => async (dispatch) => {\n\ttry {\n\t\tconsole.log('SSSSSSIUKHBSKJBSKUBSKBJSKUBSKUBSKUB');\n\t\tconst response = await gigetyMessenger.get(`/messages/${currentUserId}/${profileId}`);\n\t\tdispatch({\n\t\t\ttype: UPDATE_CHAT_MESSAGES,\n\t\t\tpayload: response.data,\n\t\t});\n\t} catch (error) {\n\t\tconsole.error('ERROR :: ', error);\n\t\tdispatch({\n\t\t\ttype: GET_ERRORS,\n\t\t\tpayload: error,\n\t\t});\n\t}\n};\n\nexport const updateUserMessageNotifications = (notification) => (dispatch) => {\n\tconsole.log('UPDATING NOTIFICATION ----- ', notification);\n\tdispatch({\n\t\ttype: UPDATE_MESSAGE_NOTIFICATIONS,\n\t\tpayload: notification,\n\t});\n};\n\nexport const findUserMessageNotifications = (userId) => async (dispatch) => {\n\ttry {\n\t\tconst response = await gigetyMessenger.get(`/user/${userId}/queue/messages`);\n\t\tconsole.log('RESPONSEEEE :: ', response);\n\t\tdispatch({\n\t\t\ttype: UPDATE_MESSAGE_NOTIFICATIONS,\n\t\t\tpayload: response.data,\n\t\t});\n\t} catch (error) {\n\t\tconsole.error('ERROR :: ', error);\n\t\tdispatch({\n\t\t\ttype: GET_ERRORS,\n\t\t\tpayload: error,\n\t\t});\n\t}\n};\n\nexport const findNewUserMessages = (userId) => async (dispatch) => {\n\ttry {\n\t\tconst response = await gigetyMessenger.get(`/messages/status/RECEIVED/${userId}`);\n\t\tconsole.log('Found new user messages: ', response.data);\n\t\tdispatch({\n\t\t\ttype: UPDATE_NEW_USER_MESSAGES,\n\t\t\tpayload: response.data,\n\t\t});\n\t} catch (error) {\n\t\tconsole.error('ERROR :: ', error);\n\t\tdispatch({\n\t\t\ttype: GET_ERRORS,\n\t\t\tpayload: error,\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}