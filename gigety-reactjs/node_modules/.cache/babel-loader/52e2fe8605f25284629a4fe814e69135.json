{"ast":null,"code":"import gigety from 'apis/gigety';\nimport { FOUND_GIG_SEARCH_RESULTS, GET_GIG } from '../types';\nexport const searchAllGigs = searchTerm => async dispatch => {\n  try {\n    //TODO: Pagination currently hardcoded, should be handled correct instead\n    const response = await gigety.post(`/pnode/gigs/100/0`, {\n      searchTerm\n    });\n    dispatch({\n      type: FOUND_GIG_SEARCH_RESULTS,\n      payload: response.data\n    });\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\nexport const getGigForGuest = id => async (dispatch, getState) => {\n  try {\n    const response = await gigety.get(`/pnode/gigs/${id}`);\n    dispatch({\n      type: GET_GIG,\n      payload: response.data\n    });\n  } catch (error) {\n    console.error(`Error retrieving gig with id : ${id}`, error);\n    throw error;\n  }\n};","map":{"version":3,"sources":["/Users/samuelsegal/git/gigety/gigety-reactjs/react-gigety/src/redux/actions/guest/gigAction.js"],"names":["gigety","FOUND_GIG_SEARCH_RESULTS","GET_GIG","searchAllGigs","searchTerm","dispatch","response","post","type","payload","data","error","console","getGigForGuest","id","getState","get"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,SAASC,wBAAT,EAAmCC,OAAnC,QAAkD,UAAlD;AAEA,OAAO,MAAMC,aAAa,GAAIC,UAAD,IAAgB,MAAOC,QAAP,IAAoB;AAChE,MAAI;AACH;AACA,UAAMC,QAAQ,GAAG,MAAMN,MAAM,CAACO,IAAP,CAAa,mBAAb,EAAiC;AACvDH,MAAAA;AADuD,KAAjC,CAAvB;AAGAC,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEP,wBAAR;AAAkCQ,MAAAA,OAAO,EAAEH,QAAQ,CAACI;AAApD,KAAD,CAAR;AACA,GAND,CAME,OAAOC,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAMA,KAAN;AACA;AACD,CAXM;AAaP,OAAO,MAAME,cAAc,GAAIC,EAAD,IAAQ,OAAOT,QAAP,EAAiBU,QAAjB,KAA8B;AACnE,MAAI;AACH,UAAMT,QAAQ,GAAG,MAAMN,MAAM,CAACgB,GAAP,CAAY,eAAcF,EAAG,EAA7B,CAAvB;AACAT,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEN,OAAR;AAAiBO,MAAAA,OAAO,EAAEH,QAAQ,CAACI;AAAnC,KAAD,CAAR;AACA,GAHD,CAGE,OAAOC,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACD,KAAR,CAAe,kCAAiCG,EAAG,EAAnD,EAAsDH,KAAtD;AACA,UAAMA,KAAN;AACA;AACD,CARM","sourcesContent":["import gigety from 'apis/gigety';\nimport { FOUND_GIG_SEARCH_RESULTS, GET_GIG } from '../types';\n\nexport const searchAllGigs = (searchTerm) => async (dispatch) => {\n\ttry {\n\t\t//TODO: Pagination currently hardcoded, should be handled correct instead\n\t\tconst response = await gigety.post(`/pnode/gigs/100/0`, {\n\t\t\tsearchTerm,\n\t\t});\n\t\tdispatch({ type: FOUND_GIG_SEARCH_RESULTS, payload: response.data });\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tthrow error;\n\t}\n};\n\nexport const getGigForGuest = (id) => async (dispatch, getState) => {\n\ttry {\n\t\tconst response = await gigety.get(`/pnode/gigs/${id}`);\n\t\tdispatch({ type: GET_GIG, payload: response.data });\n\t} catch (error) {\n\t\tconsole.error(`Error retrieving gig with id : ${id}`, error);\n\t\tthrow error;\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}